head(perf)
perf$cut = cutpoints
plot(perf$cut, perf$accuracy, type = "b")
line(perf$cut, perf$sensitivity)
plot(perf$cut, perf$accuracy, type = "b");
line(perf$cut, perf$sensitivity)
plot(perf$cut, perf$accuracy, type = "b");
lines(perf$cut, perf$sensitivity)
plot(perf$cut, perf$accuracy, type = "b", ylim = c(0, 1));
lines(perf$cut, perf$sensitivity)
plot(perf$cut, perf$accuracy, type = "b", ylim = c(0, 1));
lines(perf$cut, perf$sensitivity, col = "red");
lines(perf$cut, perf$specificity, col = "blue")
cutpoints[which.max(accuracy)]
cutpoints[which.max(perf$accuracy)]
ls()
perf[which.max(perf$accuracy), ]
load("/users/xwang/roche34/otf2/alldata_pct20.rdt")
load(file = "~/Projects/roche34/validation/or_perf.rdt")
rm(list = ls())
load(file = "~/Projects/roche34/validation/or_perf.rdt")
head(fs.train)
fs.dsc = fs.train # training data
cutpoints = seq(0, 1, by = 0.01)
perf <- sapply(cutpoints, function(cut) {
fit.y <- ifelse(fs.dsc$pmf1 > cut, 1, 0)
fit.y <- factor(fit.y, levels = c(0, 1))
accuracy = mean(fs.dsc$obs == fit.y)
sensitivity = sum(fit.y[fs.dsc$obs == 1] == fs.dsc$obs[fs.dsc$obs == 1]) / sum(fs.dsc$obs == 1)
specificity = sum(fit.y[fs.dsc$obs == 0] == fs.dsc$obs[fs.dsc$obs == 0]) / sum(fs.dsc$obs == 0)
data.frame(sensitivity = sensitivity, specificity = specificity, accuracy = accuracy)
})
perf = as.data.frame(t(perf))
perf$cut = cutpoints
perf[which.max(perf$accuracy), ]
plot(perf$cut, perf$accuracy, type = "b", ylim = c(0, 1));
lines(perf$cut, perf$sensitivity, col = "red");
lines(perf$cut, perf$specificity, col = "blue")
plot(perf$cut, perf$accuracy, type = "b", ylim = c(0, 1), xlab = "Cut Value", ylab = "Performance (Accuracy|Sensitivity|Specificity)");
?legend
legend(1, 95, legend=c("Accuracy", "Sensitivity", "Specificity"), col=c("black", "red", "blue"), lty=1:2, cex=0.8)
legend( legend=c("Accuracy", "Sensitivity", "Specificity"), col=c("black", "red", "blue"), lty=1:2, cex=0.8)
legend(.8, .8, legend=c("Accuracy", "Sensitivity", "Specificity"), col=c("black", "red", "blue"), lty=1:2, cex=0.8)
legend(.8, .9, legend=c("Accuracy", "Sensitivity", "Specificity"), col=c("black", "red", "blue"), lty=1:2, cex=0.8)
plot(perf$cut, perf$accuracy, type = "b", ylim = c(0, 1), xlab = "Cut Value", ylab = "Accuracy|Sensitivity|Specificity");
legend(.8, .9, legend=c("Accuracy", "Sensitivity", "Specificity"), col=c("black", "red", "blue"), lty=1:2, cex=0.8);
lines(perf$cut, perf$sensitivity, col = "red");
lines(perf$cut, perf$specificity, col = "blue")
fs.dsc = fs.test # testing data
cutpoints = seq(0, 1, by = 0.01)
perf <- sapply(cutpoints, function(cut) {
fit.y <- ifelse(fs.dsc$pmf1 > cut, 1, 0)
fit.y <- factor(fit.y, levels = c(0, 1))
accuracy = mean(fs.dsc$obs == fit.y)
sensitivity = sum(fit.y[fs.dsc$obs == 1] == fs.dsc$obs[fs.dsc$obs == 1]) / sum(fs.dsc$obs == 1)
specificity = sum(fit.y[fs.dsc$obs == 0] == fs.dsc$obs[fs.dsc$obs == 0]) / sum(fs.dsc$obs == 0)
data.frame(sensitivity = sensitivity, specificity = specificity, accuracy = accuracy)
})
fs.dsc = fs.test # testing data
head(fs.dsc)
load(file = "~/Projects/roche34/validation/or_perf.rdt")
fs.dsc = fs.test # testing data
head(fs.dsc)
cutpoints = seq(0, 1, by = 0.01)
perf <- sapply(cutpoints, function(cut) {
fit.y <- ifelse(fs.dsc$pmf1 > cut, 1, 0)
fit.y <- factor(fit.y, levels = c(0, 1))
accuracy = mean(fs.dsc$obs == fit.y)
sensitivity = sum(fit.y[fs.dsc$obs == 1] == fs.dsc$obs[fs.dsc$obs == 1]) / sum(fs.dsc$obs == 1)
specificity = sum(fit.y[fs.dsc$obs == 0] == fs.dsc$obs[fs.dsc$obs == 0]) / sum(fs.dsc$obs == 0)
data.frame(sensitivity = sensitivity, specificity = specificity, accuracy = accuracy)
})
perf = as.data.frame(t(perf))
perf$cut = cutpoints
perf[which.max(perf$accuracy), ]
head(perf)
head(perf)
head(fs.dsc)
cutpoints
cut = .5
fit.y <- ifelse(fs.dsc$pmf1 > cut, 1, 0)
fit.y <- factor(fit.y, levels = c(0, 1))
fit.y
accuracy = mean(fs.dsc$obs == fit.y)
accuracy
fs.dsc$obs
table(is.na(fs.dsc$obs))
fs.dsc = fs.dsc[! is.na(fs.dsc$obs), ]
dim(fs.dsc)
cutpoints = seq(0, 1, by = 0.01)
perf <- sapply(cutpoints, function(cut) {
fit.y <- ifelse(fs.dsc$pmf1 > cut, 1, 0)
fit.y <- factor(fit.y, levels = c(0, 1))
accuracy = mean(fs.dsc$obs == fit.y)
sensitivity = sum(fit.y[fs.dsc$obs == 1] == fs.dsc$obs[fs.dsc$obs == 1]) / sum(fs.dsc$obs == 1)
specificity = sum(fit.y[fs.dsc$obs == 0] == fs.dsc$obs[fs.dsc$obs == 0]) / sum(fs.dsc$obs == 0)
data.frame(sensitivity = sensitivity, specificity = specificity, accuracy = accuracy)
})
perf = as.data.frame(t(perf))
perf$cut = cutpoints
perf[which.max(perf$accuracy), ]
plot(perf$cut, perf$accuracy, type = "b", ylim = c(0, 1), xlab = "Cut Value", ylab = "Accuracy|Sensitivity|Specificity");
legend(.8, .9, legend=c("Accuracy", "Sensitivity", "Specificity"), col=c("black", "red", "blue"), lty=1:2, cex=0.8);
lines(perf$cut, perf$sensitivity, col = "red");
lines(perf$cut, perf$specificity, col = "blue")
?rpois
y1 = rpois(1e3, lambda = 1)
hist(y1)
plot(density((y1))
plot(density(y1))
plot(density(y1))
hist(y1, n = 1e3)
hist(y1, n = 1e2)
hist(y1, n = 5e1)
y2 = rpois(1e3, lambda = 2)
hist(y1, n = 5e1)
hist(y2, n = 5e1)
y2 = rpois(1e3, lambda = 1e2)
y3 = rpois(1e3, lambda = 1e2)
hist(y3, n = 5e1)
y3 = rpois(1e3, lambda = 3)
hist(y3, n = 5e1)
y10 = rpois(1e3, lambda = 10)
hist(y10, n = 5e1)
y3 = rpois(1e3, lambda = 3)
y3 = rpois(1e3, lambda = 3)
hist(y3, n = 5e1)
mean(y3)
var(y3)
mean(y3 = 3)
mean(y3 == 3)
factorial(3)
factorial(4)
pmf.poi = function(lambda, x) lambda^x * exp(-lambda) / factorial(x)
pmf.poi(3, 3)
factorial(0)
factorial(1)
?offset
svn <- unlist(strsplit("$Id: PiecewiseSimulation.R 16 2009-09-17 06:32:43Z walke $"," "))
svn
age <-factor(c(1,1,2,2,3,3,4,4))
period <-factor(c(1,2,1,2,1,2,1,2))
occ <-c(19,10,70,23,134,69,57,27)
expo <-c(1072.5,339,3427,1075,20063,5991,21593,5941)
umea <- data.frame(age, period, occ, expo)
rm(age, period, occ, expo)
head(umea)
umea1 <- glm(occ ~ age + period + offset(log(expo)), family = poisson(link="log"), data = umea)
summary(umea1)
orca <- read.table("http://www.stats4life.se/data/oralca.txt", header = T)
rm(list = ls())
orca <- read.table("http://www.stats4life.se/data/oralca.txt", header = T)
orca$all <- 1 * (orca$event != "Alive")
table(orca$all)
head(orca)
table(orca$event)
pkg <- c("knitr", "kfigr", "tidyverse", "survival", "ggfortify", "survminer", "plotly",
"gridExtra", "Epi", "KMsurv", "gnm", "cmprsk", "mstate", "flexsurv", "splines",
"epitools", "eha", "shiny")
sapply(pkg, require, character.only = TRUE)
install.packages("Epi")
install.packages("plotly")
sapply(pkg, require, character.only = TRUE)
sapply(pkg, require, character.only = TRUE)
install.packages("epitools")
install.packages("eha")
sapply(pkg, require, character.only = TRUE)
sapply(pkg, require, character.only = TRUE)
install.packages("gnm")
sapply(pkg, require, character.only = TRUE)
sapply(pkg, require, character.only = TRUE)
install.packages("mstate")
install.packages("flexsurv")
sapply(pkg, require, character.only = TRUE)
sapply(pkg, require, character.only = TRUE)
orca %>%
mutate(
text = paste("Subject ID = ", id, "<br>", "Time = ", time, "<br>", "Event = ",
event, "<br>", "Age = ", round(age, 2), "<br>", "Stage = ", stage)
)
ggplotly(
orca %>%
mutate(
text = paste("Subject ID = ", id, "<br>", "Time = ", time, "<br>", "Event = ",
event, "<br>", "Age = ", round(age, 2), "<br>", "Stage = ", stage)
) %>%
ggplot(aes(x = id, y = time, text = text)) +
geom_linerange(aes(ymin = 0, ymax = time)) +
geom_point(aes(shape = event, color = event), stroke = 1, cex = 2) +
scale_shape_manual(values = c(1, 3, 4)) +
labs(y = "Time (years)", x = "Subject ID") + coord_flip() + theme_classic(),
tooltip = "text"
)
su_obj <- Surv(orca$time, orca$all)
str(su_obj)
fit_km <- survfit(su_obj ~ 1, data = orca)
str(fit_km)
print(fit_km, print.rmean = TRUE)
dat_km <- fortify(fit_km)
head(dat_km)
ggsurvplot(fit_km, risk.table = TRUE, xlab = "Time (years)", censor = T)
fit_exp(su_obj ~ 1, data = orca, dist = "exponential")
fit_exp = flexsurvreg(su_obj ~ 1, data = orca, dist = "exponential")
flexsurvreg(su_obj ~ 1, data = orca, dist = "exponential")
flexsurvreg(su_obj ~ 1, data = orca, dist = "weibull")
?pois.approx
?survfit
survfit(su_obj ~ stage, data = orca)
su_stg = survfit(su_obj ~ stage, data = orca)
summary(su_stg)
flexsurvreg(su_obj ~ 1, data = orca, dist = "weibull")
flexsurvreg(su_obj ~ stage, data = orca, dist = "weibull")
flexsurvreg(su_obj ~ 1, data = orca, dist = "exponential")
flexsurvreg(su_obj ~ 1, data = orca, dist = "weibull")
I(orca$age - 65)
I((orca$age - 65) / 10)
?I
I(10)
m1 = coxph(su_obj ~ sex + I((age-65)/10) + stage, data = orca)
summary(m1)
orca2 <- orca %>%
filter(stage != "unkn") %>%
mutate(st3 = Relevel(droplevels(stage), list(1:2, 3, 4)))
m2 <- coxph(Surv(time, all) ~ sex + I((age-65)/10) + st3, data = orca2, ties = "breslow")
summary(m2)
head(orca2)
dim(orca2)
cuts <- sort(unique(orca2$time[orca2$all == 1]))
cuts
orca_splitted <- survSplit(Surv(time, all) ~ ., data = orca2, cut = cuts, episode = "tgroup")
head(orca_splitted, 15)
dim(orca_splitted)
138 *127
138 *267
mod_poi <- gnm(all ~ sex + I((age-65)/10) + st3, data = orca_splitted, family = poisson, eliminate = factor(time))
summary(mod_poi)
mod_poi <- glm(all ~ sex + I((age-65)/10) + st3, data = orca_splitted, family = poisson, offset = factor(time))
mod_poi <- glm(all ~ sex + I((age-65)/10) + st3, data = orca_splitted, family = poisson, offset = log(time))
summary(mod_poi)
mod_poi <- gnm(all ~ sex + I((age-65)/10) + st3, data = orca_splitted, family = poisson, eliminate = factor(time))
summary(mod_poi)
mod_poi <- glm(all ~ sex + I((age-65)/10) + st3 - 1, data = orca_splitted, family = poisson, offset = log(time))
summary(mod_poi)
mod_poi <- glm(all ~ factor(sex) + I((age-65)/10) + st3 - 1, data = orca_splitted, family = poisson, offset = log(time))
summary(mod_poi)
mod_poi <- glm(all ~ factor(sex) + I((age-65)/10) + st3, data = orca_splitted, family = poisson, offset = log(time))
mod_poi <- glm(all ~ factor(sex) + I((age-65)/10) + st3, data = orca_splitted, family = poisson, offset = log(time))
mod_poi <- glm(all ~ factor(sex) + I((age-65)/10) + st3, data = orca_splitted, family = poisson, offset = log(time))
summary(mod_poi)
mod_poi <- gnm(all ~ sex + I((age-65)/10) + st3, data = orca_splitted, family = poisson, eliminate = factor(time))
summary(mod_poi)
summary(m2)
summary(mod_poi)
ci.exp(mod_poi)
exp(0.28394)
head(orca_splitted)
orca_splitted$dur <- with(orca_splitted, time - tstart)
head(orca_splitted)
mod_poi2 <- glm(all ~ -1 + factor(time) + sex + I((age-65)/10) + st3,
data = orca_splitted, family = poisson, offset = log(dur))
summary(mod_poi2)
data(kidney)
head(kidney)
tab <- data.frame(table(kidney[kidney$status == 1, "time"]))
tab
library(survival)
data("kidney")
head(kidney)
table(kidney$delta)
tab <- data.frame(table(kidney[kidney$delta == 1, "time"]))
tab
y <- as.numeric(levels(tab[, 1]))[tab[, 1]] #ordered distinct event times
y
d <- tab[, 2]                               #number of events
d
fit<-coxph(Surv(time, delta) ~ age, data = kidney)
head(kidney)
head(orca2)
attach(orca2)
tab
tab <- data.frame(table(orca2[orca2$all$delta == 1, "time"]))
tab <- data.frame(table(orca2[orca2$all == 1, "time"]))
tab
y <- as.numeric(levels(tab[, 1]))[tab[, 1]] # ordered distinct event times
d <- tab[, 2] # number of events
m2
H0 <- basehaz(m2, centered=FALSE)
H0
H0 <- H0[H0[, 2] %in% y, ] # only keep rows where events occurred
dim(H0)
head(H0)
betaHat <- m2$coef
betaHat
d
library(rstan)
rm(list = ls())
setwd("~/GitHub/Genetics/rstan")
load("~/GitHub/Genetics/Manu/R/mdata.rdt")
load("~/GitHub/Genetics/Manu/R/sampling.rdt")
load("~/GitHub/Genetics/Manu/R/genotypes.rdt")
mcmc = mcmc[order(mcmc$P), ]
mcmc = rownames(mcmc[1:100, ]) # top 100 variants
all(mcmc %in% rownames(geno))
all(mdata$ADSP.Sample.ID %in% colnames(geno))
geno = geno[mcmc, mdata$ADSP.Sample.ID]
prior.norm = stan_model("~/GitHub/Genetics/rstan/prior2.stan") # N(0, 1) as prior of variant effect
prior.flat = stan_model("~/GitHub/Genetics/rstan/prior3.stan") # flat as prior of variant effect
data <- list(N = 570, K = 4, D = 2, x = mdata[c("Age", "Sex")], y = as.numeric(mdata$AD1), g = geno[1, ])
tops = lapply(1:nrow(geno), function(g1) {
data$g = geno[g1, ]
fit.norm = optimizing(prior.norm, data = data, hessian = TRUE, algorithm = "LBFGS")
fit.norm.se = tryCatch(sqrt(diag(solve(-fit.norm$hessian)))["p"], error=function(e) NULL)
fit.flat = optimizing(prior.flat, data = data, hessian = TRUE, algorithm = "LBFGS")
fit.flat.se = tryCatch(sqrt(diag(solve(-fit.flat$hessian)))["p"], error=function(e) NULL)
data.frame(norm = fit.norm$par["p"], norm.se = fit.norm.se, flat = fit.flat$par["p"], flat.se = fit.flat.se)
})
tops = as.data.frame(do.call(rbind, tops))
tops$P.norm <- pnorm(abs(tops$norm), sd = tops$norm.se, lower.tail = F) * 2
tops$P.flat <- pnorm(abs(tops$flat), sd = tops$flat.se, lower.tail = F) * 2
tops$P.norm <- -log10(tops$P.norm)
tops$P.flat <- -log10(tops$P.flat)
plot(tops$norm, tops$flat, xlab = "Standard Normal Prior", ylab = "Flat Prior", main = "Effect Size")
abline(a = 0, b = 1, col = "red")
plot(tops$P.norm, tops$P.flat, xlab = "Standard Normal Prior", ylab = "Flat Prior", main = "Tail Probability")
abline(a = 0, b = 1, col = "red")
plot(tops$norm, tops$flat, xlab = "Standard Normal Prior", ylab = "Flat Prior", main = "Effect Size")
abline(a = 0, b = 1, col = "red")
postscript ("Figure.n.eps", paper="special", width=4, height=3, horizontal=FALSE)
plot(tops$norm, tops$flat, xlab = "Standard Normal Prior", ylab = "Flat Prior", main = "Effect Size")
abline(a = 0, b = 1, col = "red")
dev.off()
postscript("Figure.n.eps", paper="special", width=4, height=3, horizontal=FALSE)
plot(tops$norm, tops$flat, xlab = "Standard Normal Prior", ylab = "Flat Prior", main = "Effect Size")
abline(a = 0, b = 1, col = "red")
dev.off()
dir()
getwd()
postscript("~/GitHub/Genetics/print/supp1.eps", paper="special", width=4, height=3, horizontal=FALSE)
plot(tops$norm, tops$flat, xlab = "Standard Normal Prior", ylab = "Flat Prior", main = "Effect Size")
abline(a = 0, b = 1, col = "red")
dev.off()
getwd()
rm(list = ls())
setwd("~/gitHub/Genetics/mle")
load("./mdata.rdt")
load("./sampling.rdt")
load("./genotypes.rdt")
mcmc = mcmc[order(mcmc$P), ]
mcmc = rownames(mcmc[1:100, ]) # top 100 variants
all(mcmc %in% rownames(geno))
all(mdata$ADSP.Sample.ID %in% colnames(geno))
geno = geno[mcmc, mdata$ADSP.Sample.ID]
glm <- stan_model("./glm.stan")
data <- list(N = 570, K = 4, D = 2, x = mdata[c("Age", "Sex")], y = as.numeric(mdata$AD1), g = geno[1, ])
mymle <- lapply(1:nrow(geno), function(g1) {
data$g = geno[g1, ]
mle1 = optimizing(glm, data = data, hessian = TRUE, algorithm = "LBFGS")
mle1.se = tryCatch(sqrt(diag(solve(-mle1$hessian)))["p"], error=function(e) NULL)
data.frame(effect = mle1$par["p"], effect.se = mle1.se)
}); names(mymle) = rownames(geno)
mymle = as.data.frame(do.call(rbind, mymle))
mymle$Pval <- pnorm(abs(mymle$effect), sd = mymle$effect.se, lower.tail = F) * 2
mymcmc <- lapply(1:nrow(geno), function(g1) {
data$g = geno[g1, ]
mcmc1 = sampling(glm, data = data, chain = 1, iter = 1200, warmup = 200)
mcmc1 = summary(mcmc1, pars = c("p", "beta"))$summary
mcmc1 = mcmc1["p", c("mean", "sd")]
}); names(mymcmc) = rownames(geno)
mymcmc = as.data.frame(do.call(rbind, mymcmc))
mymcmc$Pval <- pnorm(abs(mymcmc$mean), sd = mymcmc$sd, lower.tail = F) * 2
postscript("~/GitHub/Genetics/print/supp2.eps", paper="special", width=4, height=3, horizontal=FALSE)
plot(mymle$effect, mymcmc$mean, xlab = "Mean by MLE", ylab = "Mean by MCMC")
abline(a = 0, b = 1)
plot(mymle$effect.se, mymcmc$sd, xlab = "St.Err by MLE", ylab = "St.Dev by MCMC")
abline(a = 0, b = 1)
plot(-log10(mymle$Pval), -log10(mymcmc$Pval), xlab = "P-value by MLE", ylab = "P-value by MCMC")
abline(a = 0, b = 1)
dev.off()
library(rstan)
library(dplyr)
rm(list = ls())
setwd("~/GitHub/Genetics/priors")
load("./mdata.rdt")
load("./igap_t1k.rdt") # ./igap/igap.Rmd for more details
igap = igap_t1k$igap
geno = igap_t1k$geno
geno = geno[, mdata$SRR]
data <- list(N = 570, K = 4, D = 2, x = mdata[c("Age", "Sex")], y = as.numeric(mdata$AD1))
load("./mymle.rdt")
plot(igap$Beta, mymle0$effect, xlim = c(-1, 2), ylim = c(-1, 2),
xlab = "Effect in IGAP", ylab = "Effect in Bayes-GLMM", main = "No prior")
abline(a = 0, b = 1, col = "red")
plot(igap$SE, mymle0$effect.se, xlim = c(0, 0.2), ylim = c(0, 0.6),
xlab = "Standard Error in IGAP", ylab = "Standard Error in Bayes-GLMM", main = "No prior")
abline(a = 0, b = 1, col = "red")
plot(-log10(igap$Pvalue), -log10(mymle0$Pval), xlim = c(0, 150), ylim = c(0, 6),
xlab = "-log10(Pval) in IGAP", ylab = "-log10(Pval) in Bayes-GLMM", main = "No prior")
abline(a = 0, b = 1, col = "red")
postscript("~/GitHub/Genetics/print/supp5.eps", paper="special", width=4, height=3, horizontal=FALSE)
plot(igap$Beta, mymle0$effect, xlim = c(-1, 2), ylim = c(-1, 2),
xlab = "Effect in IGAP", ylab = "Effect in Bayes-GLMM", main = "No prior")
abline(a = 0, b = 1, col = "red")
plot(igap$SE, mymle0$effect.se, xlim = c(0, 0.2), ylim = c(0, 0.6),
xlab = "Standard Error in IGAP", ylab = "Standard Error in Bayes-GLMM", main = "No prior")
abline(a = 0, b = 1, col = "red")
plot(-log10(igap$Pvalue), -log10(mymle0$Pval), xlim = c(0, 150), ylim = c(0, 6),
xlab = "-log10(Pval) in IGAP", ylab = "-log10(Pval) in Bayes-GLMM", main = "No prior")
abline(a = 0, b = 1, col = "red")
dev.off()
postscript("~/GitHub/Genetics/print/supp5.eps", paper="special", width=4, height=3, horizontal=FALSE)
plot(igap$Beta, mymle0$effect, xlim = c(-1, 2), ylim = c(-1, 2),
xlab = "Effect in IGAP", ylab = "Effect in Bayes-GLMM")
abline(a = 0, b = 1, col = "red")
plot(igap$SE, mymle0$effect.se, xlim = c(0, 0.2), ylim = c(0, 0.6),
xlab = "Standard Error in IGAP", ylab = "Standard Error in Bayes-GLMM")
abline(a = 0, b = 1, col = "red")
plot(-log10(igap$Pvalue), -log10(mymle0$Pval), xlim = c(0, 150), ylim = c(0, 6),
xlab = "-log10(Pval) in IGAP", ylab = "-log10(Pval) in Bayes-GLMM")
abline(a = 0, b = 1, col = "red")
dev.off()
postscript("~/GitHub/Genetics/print/supp5.eps", paper="special", width=5, height=4, horizontal=FALSE)
plot(igap$Beta, mymle0$effect, xlim = c(-1, 2), ylim = c(-1, 2),
xlab = "Effect in IGAP", ylab = "Effect in Bayes-GLMM")
abline(a = 0, b = 1, col = "red")
plot(igap$SE, mymle0$effect.se, xlim = c(0, 0.2), ylim = c(0, 0.6),
xlab = "Standard Error in IGAP", ylab = "Standard Error in Bayes-GLMM")
abline(a = 0, b = 1, col = "red")
plot(-log10(igap$Pvalue), -log10(mymle0$Pval), xlim = c(0, 150), ylim = c(0, 6),
xlab = "-log10(Pval) in IGAP", ylab = "-log10(Pval) in Bayes-GLMM")
abline(a = 0, b = 1, col = "red")
dev.off()
postscript("~/GitHub/Genetics/print/supp6.eps", paper="special", width=5, height=4, horizontal=FALSE)
par(mfrow = c(1, 2))
plot(-log10(mymle1$Pval), -log10(igap$Pvalue),
xlab = "ADSP - Prior by method 1", ylab = "IGAP")
abline(a = 0, b = 1, col = "red")
plot(-log10(mymle1$Pval), -log10(mymle0$Pval),
xlab = "ADSP - Prior by method 1", ylab = "ADSP - No prior")
abline(a = 0, b = 1, col = "red")
plot(-log10(mymle2$Pval), -log10(igap$Pvalue),
xlab = "ADSP - Prior by method 2", ylab = "IGAP")
abline(a = 0, b = 1, col = "red")
plot(-log10(mymle2$Pval), -log10(mymle0$Pval),
xlab = "ADSP - Prior by method 2", ylab = "ADSP - No prior")
abline(a = 0, b = 1, col = "red")
plot(-log10(mymle3$Pval), -log10(igap$Pvalue),
xlab = "ADSP - Prior by method 3", ylab = "IGAP")
abline(a = 0, b = 1, col = "red")
plot(-log10(mymle3$Pval), -log10(mymle0$Pval),
xlab = "ADSP - Prior by method 3", ylab = "ADSP - No prior")
abline(a = 0, b = 1, col = "red")
plot(-log10(mymle4$Pval), -log10(igap$Pvalue),
xlab = "ADSP - Prior by method 4", ylab = "IGAP")
abline(a = 0, b = 1, col = "red")
plot(-log10(mymle4$Pval), -log10(mymle0$Pval),
xlab = "ADSP - Prior by method 4", ylab = "ADSP - No prior")
abline(a = 0, b = 1, col = "red")
dev.off()
postscript("~/GitHub/Genetics/print/supp6.eps", paper="special", width=9, height=4, horizontal=FALSE)
par(mfrow = c(1, 2))
plot(-log10(mymle1$Pval), -log10(igap$Pvalue),
xlab = "ADSP - Prior by method 1", ylab = "IGAP")
abline(a = 0, b = 1, col = "red")
plot(-log10(mymle1$Pval), -log10(mymle0$Pval),
xlab = "ADSP - Prior by method 1", ylab = "ADSP - No prior")
abline(a = 0, b = 1, col = "red")
plot(-log10(mymle2$Pval), -log10(igap$Pvalue),
xlab = "ADSP - Prior by method 2", ylab = "IGAP")
abline(a = 0, b = 1, col = "red")
plot(-log10(mymle2$Pval), -log10(mymle0$Pval),
xlab = "ADSP - Prior by method 2", ylab = "ADSP - No prior")
abline(a = 0, b = 1, col = "red")
plot(-log10(mymle3$Pval), -log10(igap$Pvalue),
xlab = "ADSP - Prior by method 3", ylab = "IGAP")
abline(a = 0, b = 1, col = "red")
plot(-log10(mymle3$Pval), -log10(mymle0$Pval),
xlab = "ADSP - Prior by method 3", ylab = "ADSP - No prior")
abline(a = 0, b = 1, col = "red")
plot(-log10(mymle4$Pval), -log10(igap$Pvalue),
xlab = "ADSP - Prior by method 4", ylab = "IGAP")
abline(a = 0, b = 1, col = "red")
plot(-log10(mymle4$Pval), -log10(mymle0$Pval),
xlab = "ADSP - Prior by method 4", ylab = "ADSP - No prior")
abline(a = 0, b = 1, col = "red")
dev.off()
postscript("~/GitHub/Genetics/print/supp6.eps", paper="special", width=8, height=4, horizontal=FALSE)
par(mfrow = c(1, 2))
plot(-log10(mymle1$Pval), -log10(igap$Pvalue),
xlab = "ADSP - Prior by method 1", ylab = "IGAP")
abline(a = 0, b = 1, col = "red")
plot(-log10(mymle1$Pval), -log10(mymle0$Pval),
xlab = "ADSP - Prior by method 1", ylab = "ADSP - No prior")
abline(a = 0, b = 1, col = "red")
plot(-log10(mymle2$Pval), -log10(igap$Pvalue),
xlab = "ADSP - Prior by method 2", ylab = "IGAP")
abline(a = 0, b = 1, col = "red")
plot(-log10(mymle2$Pval), -log10(mymle0$Pval),
xlab = "ADSP - Prior by method 2", ylab = "ADSP - No prior")
abline(a = 0, b = 1, col = "red")
plot(-log10(mymle3$Pval), -log10(igap$Pvalue),
xlab = "ADSP - Prior by method 3", ylab = "IGAP")
abline(a = 0, b = 1, col = "red")
plot(-log10(mymle3$Pval), -log10(mymle0$Pval),
xlab = "ADSP - Prior by method 3", ylab = "ADSP - No prior")
abline(a = 0, b = 1, col = "red")
plot(-log10(mymle4$Pval), -log10(igap$Pvalue),
xlab = "ADSP - Prior by method 4", ylab = "IGAP")
abline(a = 0, b = 1, col = "red")
plot(-log10(mymle4$Pval), -log10(mymle0$Pval),
xlab = "ADSP - Prior by method 4", ylab = "ADSP - No prior")
abline(a = 0, b = 1, col = "red")
dev.off()
