z2$deviance / (100 - 2)
var(z2$residuals)
sd(z1$residuals)
sd(z1$residuals)^2
var(z2$residuals)
var(z1$residuals)
sd(z1$residuals)^2
var(z1$residuals)
var(z2$residuals)
sum(z2$residuals^2)
z2$deviance
sqrt(z2$deviance / 98)
z2$deviance / (100 - 2)
z2$deviance / (100)
z2$deviance / (100 - 1)
z2$deviance
var(z2$residuals)
z2$deviance / (100 - 1)
var(z2$residuals)
z2$deviance / (100 - 1)
z2$linear.predictors
x = rbinom(n = 100, size = 1, prob = 0.8)
z2 = glm(x ~ 1, family = "binomial")
summary(z2)
z2$fitted.values
z2$linear.predictors
log(z2$fitted.values / (1 - z2$fitted.values))
z2$fitted.values
z2$linear.predictors
summary(z2)
z2$fitted.values
12.99 * 105
load("/Users/xwang/Projects/roche34/otf/edgeAll.rdt") # 0.2 cutoff
edges = edgeAll$m4
edges.ooi = edges %>% filter(grepl("^pfs_|^or_|^os_", output))
library(dplyr)
edges.ooi = edges %>% filter(grepl("^pfs_|^or_|^os_", output))
edges.ooi
load("~/Projects/roche34/otf/alldata.rdt")
data = refsdf.c2
names(data)
with(data, table(asl.treat.char_ARMCD, nalt_RADIOTHERAPY))
chisq.test(data$asl.treat.char_ARMCD, data$nalt_RADIOTHERAPY)
load("/Users/xwang/Projects/roche34/otf/edgeAll.rdt") # 0.2 cutoff
?pweibull
pweibull(1, alpha = 1, beta = 1)
pweibull(1, shape = 1, scale = 1)
pweibull(2, shape = 1, scale = 1)
pweibull(3, shape = 1, scale = 1)
pweibull(4, shape = 1, scale = 1)
pweibull(5, shape = 1, scale = 1)
pweibull(6, shape = 1, scale = 1)
pweibull(6, shape = 1, scale = -1)
pweibull(6, shape = 1, scale = exp(-1))
pweibull(6, shape = 1, scale = exp(-1))
?seq
beta = seq(from = -2, to = 2, by = 0.1)
beta1 = beta[1]
y = pweibull(x, shape = 1, scale = exp(beta1))
x = 1:36
y = pweibull(x, shape = 1, scale = exp(beta1))
plot(x, y)
exp(-2)
exp(2)
beta = seq(from = -1, to = 1, by = 0.1)
beta1 = beta[1]
y = pweibull(x, shape = 1, scale = exp(beta1))
plot(x, y)
exp(-1)
exp(1)
bta1
beta1
load("~/Projects/roche34/otf/alldata.rdt")
hzci <- function(vars, datac){
mydf <- datac[, c("pfs_AVAL", "pfs_CNSR", "asl.treat.char_ARMCD")]
mydf$SurvObj = Surv(mydf$pfs_AVAL, mydf$pfs_CNSR == 0)
res <- data.frame(lapply(levels(vars), function(X) {mydf0 <- mydf[vars == X, ];
mycox = coxph(SurvObj ~ asl.treat.char_ARMCD, data = mydf0);
c(summary(mycox)$n, summary(mycox)$n - summary(mycox)$nevent, summary(mycox)$conf.int[-2])}))
colnames(res) <- paste0(substitute(vars), '.', levels(vars))
res
}
SEX = as.factor(refsdf.c1$asl.demo.char_SEX)
SEX
levels(SEX) = c("Female", "Male")
EXINV = as.factor(refsdf.c1$asl.clin.num_EXINV2 > 0)
levels(EXINV) = c("No", "Yes")
hzci(SEX, refsdf.c1)
library(survival)
hzci(SEX, refsdf.c1)
vars = SEX
datac = refsdf.c1
mydf <- datac[, c("pfs_AVAL", "pfs_CNSR", "asl.treat.char_ARMCD")]
head(df)
head(mydf)
mydf <- datac[, c("pfs_AVAL", "pfs_CNSR", "asl.treat.char_ARMCD")]
mydf$SurvObj = Surv(mydf$pfs_AVAL, mydf$pfs_CNSR == 0)
head(mydf)
res <- data.frame(lapply(levels(vars), function(X) {mydf0 <- mydf[vars == X, ];
mycox = coxph(SurvObj ~ asl.treat.char_ARMCD, data = mydf0);
c(summary(mycox)$n, summary(mycox)$n - summary(mycox)$nevent, summary(mycox)$conf.int[-2])}))
X = "Female"
mydf0 <- mydf[vars == X, ]
mycox = coxph(SurvObj ~ asl.treat.char_ARMCD, data = mydf0)
summary(mycox)
log(0.9578)
hzci(SEX, refsdf.c1)
mycox = survreg(SurvObj ~ asl.treat.char_ARMCD, data = mydf0);
summary(mycox)
exp(0.01)
mydf0 <- mydf[vars == X, ]
mycox = survreg(SurvObj ~ asl.treat.char_ARMCD, data = mydf0)
summary(mycox)
exp(-0.816)
hzci(EXINV, refsdf.c1)
exp(-0.266)
library(dplyr)
library(dplyr)
library(ggpubr)
library(survival)
library(survminer)
library(dplyr)
library(ggpubr)
library(survival)
library(survminer)
library(Biobase)
rm(list = ls())
load("/Users/xwang/Projects/roche34/R/roche_q3_refsdf.rdt")
mydf = refsdf.c1 # cli
predictor = mydf[! grepl("^os_|^pfs_|^or_", names(mydf))] # cli
predictor$asl.treat.char_ARMCD = NULL
x = "asl.demo.char_SEX"
x %in% names(predictor)
weibull.dt = data.frame(
os = Surv(mydf$os_AVAL, mydf$os_CNSR),
pfs = Surv(mydf$pfs_AVAL, mydf$pfs_CNSR),
ARM = mydf$asl.treat.char_ARMCD
)
weibull.dt$x = predictor[, x]
head(weibull.dt)
summary(survreg(pfs ~ ARM * x, data = weibull.dt))
exp(-0.55 + 0.0742)
exp(-0.55 + 0.0742 + 0.3733)
exp(0.4475)
load("~/Projects/roche34/otf/alldata.rdt")
datac = ref
hzci <- function(vars, datac){
mydf <- datac[, c("pfs_AVAL", "pfs_CNSR", "asl.treat.char_ARMCD")]
mydf$SurvObj = Surv(mydf$pfs_AVAL, mydf$pfs_CNSR == 0)
res <- data.frame(lapply(levels(vars), function(X) {mydf0 <- mydf[vars == X, ];
# mycox = coxph(SurvObj ~ asl.treat.char_ARMCD, data = mydf0);
mycox = survreg(SurvObj ~ asl.treat.char_ARMCD, data = mydf0);
c(summary(mycox)$n, summary(mycox)$n - summary(mycox)$nevent, summary(mycox)$conf.int[-2])}))
colnames(res) <- paste0(substitute(vars), '.', levels(vars))
res
}
hzci <- function(vars, datac){
mydf <- datac[, c("pfs_AVAL", "pfs_CNSR", "asl.treat.char_ARMCD")]
mydf$SurvObj = Surv(mydf$pfs_AVAL, mydf$pfs_CNSR == 0)
res <- data.frame(lapply(levels(vars), function(X) {mydf0 <- mydf[vars == X, ];
mycox = coxph(SurvObj ~ asl.treat.char_ARMCD, data = mydf0);
# mycox = survreg(SurvObj ~ asl.treat.char_ARMCD, data = mydf0);
c(summary(mycox)$n, summary(mycox)$n - summary(mycox)$nevent, summary(mycox)$conf.int[-2])}))
colnames(res) <- paste0(substitute(vars), '.', levels(vars))
res
}
SEX = as.factor(refsdf.c1$asl.demo.char_SEX)
levels(SEX) = c("Female", "Male")
EXINV = as.factor(refsdf.c1$asl.clin.num_EXINV2 > 0)
levels(EXINV) = c("No", "Yes")
hzci(SEX, refsdf.c1)
X =
"Female"
mydf <- datac[, c("pfs_AVAL", "pfs_CNSR", "asl.treat.char_ARMCD")]
datac = ref
mydf <- datac[, c("pfs_AVAL", "pfs_CNSR", "asl.treat.char_ARMCD")]
datac = refsdf.c1
mydf <- datac[, c("pfs_AVAL", "pfs_CNSR", "asl.treat.char_ARMCD")]
mydf$SurvObj = Surv(mydf$pfs_AVAL, mydf$pfs_CNSR == 0)
mydf0 <- mydf[vars == X, ]
vars = SEX
mydf0 <- mydf[vars == X, ]
mycox = coxph(SurvObj ~ asl.treat.char_ARMCD, data = mydf0)
summary(mycox)
df0 = weibull.dt[weibull.dt$x == 0, ]
df1 = weibull.dt[weibull.dt$x == 1, ]
mykm <- survfit(os ~ ARM, data = df0, conf.type = "log-log")
km0 = ggsurvplot(mykm, data = df0, conf.int = T)
km0 = ggsurvplot(mykm, data = df0, conf.int = T)
mykm <- survfit(os ~ ARM, data = df1, conf.type = "log-log")
mykm <- survfit(os ~ ARM, data = df1, conf.type = "log-log")
km1 = ggsurvplot(mykm, data = df1, conf.int = T)
km0
km1
u
weibull.dt$x = predictor[, x]
df0 = weibull.dt[weibull.dt$x == 0, ]
df1 = weibull.dt[weibull.dt$x > 0, ]
mykm <- survfit(os ~ ARM, data = df0, conf.type = "log-log")
km0 = ggsurvplot(mykm, data = df0, conf.int = T)
mykm <- survfit(os ~ ARM, data = df1, conf.type = "log-log")
km1 = ggsurvplot(mykm, data = df1, conf.int = T)
mykm <- survfit(pfs ~ ARM, data = df0, conf.type = "log-log")
km0 = ggsurvplot(mykm, data = df0, conf.int = T)
mykm <- survfit(pfs ~ ARM, data = df1, conf.type = "log-log")
km1 = ggsurvplot(mykm, data = df1, conf.int = T)
km0
km1
x = "asl.clin.num_EXINV2"
weibull.dt$x = predictor[, x]
summary(survreg(pfs ~ ARM * x, data = weibull.dt))
df0 = weibull.dt[weibull.dt$x == 0, ]
df1 = weibull.dt[weibull.dt$x > 0, ]
mykm <- survfit(pfs ~ ARM, data = df0, conf.type = "log-log")
km0 = ggsurvplot(mykm, data = df0, conf.int = T)
mykm <- survfit(pfs ~ ARM, data = df1, conf.type = "log-log")
km1 = ggsurvplot(mykm, data = df1, conf.int = T)
km0
exp(-0.442)
x
weibull.dt$x = predictor[, x]
cox.dt1 = weibull.dt[weibull.dt$x > 0, ]
cox.dt0 = weibull.dt[weibull.dt$x == 0, ]
cox.dt1 = weibull.dt[weibull.dt$x > 0, ]
summary(coxph(pfs ~ ARM, data = cox.dt0))
summary(coxph(pfs ~ ARM, data = cox.dt1))
x = "asl.demo.char_SEX"
weibull.dt$x = predictor[, x]
cox.dt0 = weibull.dt[weibull.dt$x == 0, ]
cox.dt1 = weibull.dt[weibull.dt$x > 0, ]
summary(coxph(pfs ~ ARM, data = cox.dt0))
summary(coxph(pfs ~ ARM, data = cox.dt1))
summary(coxph(pfs ~ ARM, data = cox.dt0))
summary(coxph(pfs ~ ARM, data = cox.dt1))
rm(list = ls())
load("/Users/xwang/Projects/roche34/otf/edgeAll.rdt") # 0.2 cutoff
edges = edgeAll$m1
head(edges)
tail(edges)
edges = edgeAll$m4
write.xlsx(edges, file = "/Users/xwang/Projects/roche34/otf/edges.xlsx", sheetName = "Model 4", append = T)
library(xlsx)
edges = edgeAll$m4
write.xlsx(edges, file = "/Users/xwang/Projects/roche34/otf/edges.xlsx", sheetName = "Model 4", append = T)
edges = edgeAll$m3
write.xlsx(edges, file = "/Users/xwang/Projects/roche34/otf/edges.xlsx", sheetName = "Model 3", append = T)
edges = edgeAll$m2
write.xlsx(edges, file = "/Users/xwang/Projects/roche34/otf/edges.xlsx", sheetName = "Model 2", append = T)
load("/Users/xwang/Projects/roche34/otf/edgeAll.rdt") #
edges = edgeAll$m1
write(edges, file = "/Users/xwang/Projects/roche34/otf/edges_m1.txt")
write.csv(edges, file = "/Users/xwang/Projects/roche34/otf/edges_m1.txt")
write.csv(edges, file = "/Users/xwang/Projects/roche34/otf/edges_m1.txt", quote = F)
write.csv(edges, file = "/Users/xwang/Projects/roche34/otf/edges_m1.txt", quote = F, sep = "\t")
write.csv(edges, file = "/Users/xwang/Projects/roche34/otf/edges_m1.txt", quote = F, sep = "\t")
write.csv(edges, file = "/Users/xwang/Projects/roche34/otf/edges_m1.txt", quote = F)
write.csv(edges, file = "/Users/xwang/Projects/roche34/otf/edges_m1.txt", quote = F)
edges = edgeAll$m2
write.csv(edges, file = "/Users/xwang/Projects/roche34/otf/edges_m2.txt", quote = F)
edges = edgeAll$m3
write.csv(edges, file = "/Users/xwang/Projects/roche34/otf/edges_m3.txt", quote = F)
edges = edgeAll$m4
write.csv(edges, file = "/Users/xwang/Projects/roche34/otf/edges_m4.txt", quote = F)
?pweibull
library(dplyr)
library(igraph)
rm(list = ls())
load("/Users/xwang/Projects/roche34/otf/edgeAll.rdt") #
edges = edgeAll$m4
edges %>% filter(grepl("^pfs_|^or_|^os_", output))
edges %>% filter(grepl("PCLO", output))
library(rstan)
library(dplyr)
rm(list = ls())
setwd("~/gitHub/Genetics/priors")
load("./mdata.rdt")
load("./igap_t1k.rdt") # ./igap/igap.Rmd for more details
igap = igap_t1k$igap
geno = igap_t1k$geno
geno = geno[, mdata$SRR]
prior0 <- stan_model("./prior0.stan")
glm = prior0
data <- list(N = 570, K = 4, D = 2, x = mdata[c("Age", "Sex")], y = as.numeric(mdata$AD1))
mymle <- lapply(1:nrow(geno), function(g1) { cat(g1, "\n")
data$g = geno[g1, ]
igap1 = igap[rownames(geno)[g1], ]
# data$p1 = igap1$Beta; data$p2 = igap1$SE # p1
# data$p1 = igap1$Beta; data$p2 = 1/igap1$SE -1 # p2
# data$prior = igap1$Beta/igap1$SE # p3, p4
mle1 = optimizing(glm, data = data, hessian = TRUE, algorithm = "LBFGS")
mle1.se = tryCatch(sqrt(diag(solve(-mle1$hessian)))["p"], error=function(e) NULL)
data.frame(effect = mle1$par["p"], effect.se = mle1.se)
}); names(mymle) = rownames(geno)
mymle = as.data.frame(do.call(rbind, mymle))
mymle$Pval <- pnorm(abs(mymle$effect), sd = mymle$effect.se, lower.tail = F) * 2
mymle0 = mymle
head(mymle)
glm = prior1
prior1 <- stan_model("./prior1.stan")
glm <- prior1 <- stan_model("./prior1.stan")
mymle <- lapply(1:nrow(geno), function(g1) { cat(g1, "\n")
data$g = geno[g1, ]
igap1 = igap[rownames(geno)[g1], ]
data$p1 = igap1$Beta; data$p2 = igap1$SE # p1
# data$p1 = igap1$Beta; data$p2 = 1/igap1$SE -1 # p2
# data$prior = igap1$Beta/igap1$SE # p3, p4
mle1 = optimizing(glm, data = data, hessian = TRUE, algorithm = "LBFGS")
mle1.se = tryCatch(sqrt(diag(solve(-mle1$hessian)))["p"], error=function(e) NULL)
data.frame(effect = mle1$par["p"], effect.se = mle1.se)
}); names(mymle) = rownames(geno)
mymle = as.data.frame(do.call(rbind, mymle))
mymle$Pval <- pnorm(abs(mymle$effect), sd = mymle$effect.se, lower.tail = F) * 2
mymle1 = mymle
head(mymle1)
glm <- prior2 <- stan_model("./prior2.stan")
mymle <- lapply(1:nrow(geno), function(g1) { cat(g1, "\n")
data$g = geno[g1, ]
igap1 = igap[rownames(geno)[g1], ]
# data$p1 = igap1$Beta; data$p2 = igap1$SE # p1
data$p1 = igap1$Beta; data$p2 = 1/igap1$SE -1 # p2
# data$prior = igap1$Beta/igap1$SE # p3, p4
mle1 = optimizing(glm, data = data, hessian = TRUE, algorithm = "LBFGS")
mle1.se = tryCatch(sqrt(diag(solve(-mle1$hessian)))["p"], error=function(e) NULL)
data.frame(effect = mle1$par["p"], effect.se = mle1.se)
}); names(mymle) = rownames(geno)
mymle = as.data.frame(do.call(rbind, mymle))
mymle$Pval <- pnorm(abs(mymle$effect), sd = mymle$effect.se, lower.tail = F) * 2
mymle2 = mymle
glm <- prior3 <- stan_model("./prior3.stan")
mymle <- lapply(1:nrow(geno), function(g1) { cat(g1, "\n")
data$g = geno[g1, ]
igap1 = igap[rownames(geno)[g1], ]
# data$p1 = igap1$Beta; data$p2 = igap1$SE # p1
# data$p1 = igap1$Beta; data$p2 = 1/igap1$SE -1 # p2
data$prior = igap1$Beta/igap1$SE # p3, p4
mle1 = optimizing(glm, data = data, hessian = TRUE, algorithm = "LBFGS")
mle1.se = tryCatch(sqrt(diag(solve(-mle1$hessian)))["p"], error=function(e) NULL)
data.frame(effect = mle1$par["p"], effect.se = mle1.se)
}); names(mymle) = rownames(geno)
mymle = as.data.frame(do.call(rbind, mymle))
mymle$Pval <- pnorm(abs(mymle$effect), sd = mymle$effect.se, lower.tail = F) * 2
mymle3 = mymle
glm <- prior4 <- stan_model("./prior4.stan")
mymle <- lapply(1:nrow(geno), function(g1) { cat(g1, "\n")
data$g = geno[g1, ]
igap1 = igap[rownames(geno)[g1], ]
# data$p1 = igap1$Beta; data$p2 = igap1$SE # p1
# data$p1 = igap1$Beta; data$p2 = 1/igap1$SE -1 # p2
data$prior = igap1$Beta/igap1$SE # p3, p4
mle1 = optimizing(glm, data = data, hessian = TRUE, algorithm = "LBFGS")
mle1.se = tryCatch(sqrt(diag(solve(-mle1$hessian)))["p"], error=function(e) NULL)
data.frame(effect = mle1$par["p"], effect.se = mle1.se)
}); names(mymle) = rownames(geno)
mymle = as.data.frame(do.call(rbind, mymle))
mymle$Pval <- pnorm(abs(mymle$effect), sd = mymle$effect.se, lower.tail = F) * 2
mymle4 = mymle
save(mymle0, mymle1, mymle2, mymle3, mymle4, file = "./mymle.rdt")
summary(-log10(igap$Pvalue))
plot(-log10(igap$Pvalue), -log10(mymle$Pval))
plot(-log10(igap$Pvalue), -log10(mymle0$Pval))
table(-log10(igap$Pvalue) > 150)
head(igap)
igap$Pval <- pnorm(abs(igap$Beta), sd = igap$SE, lower.tail = F) * 2
head(igap)
head(igap, n = 20)
head(igap, n = 30)
igap$Pval[igap$Pval < 1e-100] = 1e-100
plot(-log10(igap$Pval), -log10(mymle0$Pval))
igap$Pval <- pnorm(abs(igap$Beta), sd = igap$SE, lower.tail = F) * 2
plot(-log10(igap$Pval), -log10(mymle0$Pval))
plot(-log10(igap$Pvalue), -log10(mymle0$Pval))
plot(-log10(igap$Pvalue), -log10(mymle0$Pval), xlab = "IGAP (-log10(Pval)")
plot(-log10(igap$Pvalue), -log10(mymle0$Pval), xlab = "IGAP (-log10(Pval))", ylab = "Bayes-GLMM (-log10(Pval))", main = "No prior")
plot(igap$Beta, mymle0$effect, xlab = "IGAP (-log10(Pval))", ylab = "Bayes-GLMM (-log10(Pval))", main = "No prior")
abline(a = 0, b = 1)
abline(a = 0, b = 1, col = "red")
plot(igap$Beta, mymle0$effect, xlab = "Effect in IGAP", ylab = "Effect in Bayes-GLMM", main = "No prior")
abline(a = 0, b = 1, col = "red")
plot(igap$SE, mymle0$effect.se, xlab = "Standard Error in IGAP", ylab = "Standard Error in Bayes-GLMM", main = "No prior")
abline(a = 0, b = 1, col = "red")
plot(igap$Beta, mymle0$effect, xlim = c(-1, 2), ylim = c(-1, 2),
xlab = "Effect in IGAP", ylab = "Effect in Bayes-GLMM", main = "No prior")
abline(a = 0, b = 1, col = "red")
plot(igap$SE, mymle0$effect.se,
xlab = "Standard Error in IGAP", ylab = "Standard Error in Bayes-GLMM", main = "No prior")
plot(igap$SE, mymle0$effect.se, xlim = c(0, 0.2), ylim = c(0, 0.5),
xlab = "Standard Error in IGAP", ylab = "Standard Error in Bayes-GLMM", main = "No prior")
abline(a = 0, b = 1, col = "red")
plot(igap$SE, mymle0$effect.se, xlim = c(0, 0.2), ylim = c(0, 0.6),
xlab = "Standard Error in IGAP", ylab = "Standard Error in Bayes-GLMM", main = "No prior")
abline(a = 0, b = 1, col = "red")
plot(igap$Beta, mymle0$effect, xlim = c(-1, 2), ylim = c(-1, 2),
xlab = "Effect in IGAP", ylab = "Effect in Bayes-GLMM", main = "No prior")
abline(a = 0, b = 1, col = "red")
plot(-log10(igap$Pvalue), -log10(mymle0$Pval),
xlab = "-log10(Pval) in IGAP", ylab = "-log10(Pval) in Bayes-GLMM", main = "No prior")
abline(a = 0, b = 1, col = "red")
plot(-log10(igap$Pvalue), -log10(mymle0$Pval), xlim = c(0, 150), ylim = c(0, 6),
xlab = "-log10(Pval) in IGAP", ylab = "-log10(Pval) in Bayes-GLMM", main = "No prior")
abline(a = 0, b = 1, col = "red")
plot(igap$Beta, mymle0$effect, xlim = c(-1, 2), ylim = c(-1, 2),
xlab = "Effect in IGAP", ylab = "Effect in Bayes-GLMM", main = "No prior")
abline(a = 0, b = 1, col = "red")
plot(igap$SE, mymle0$effect.se, xlim = c(0, 0.2), ylim = c(0, 0.6),
xlab = "Standard Error in IGAP", ylab = "Standard Error in Bayes-GLMM", main = "No prior")
abline(a = 0, b = 1, col = "red")
plot(-log10(igap$Pvalue), -log10(mymle0$Pval), xlim = c(0, 150), ylim = c(0, 6),
xlab = "-log10(Pval) in IGAP", ylab = "-log10(Pval) in Bayes-GLMM", main = "No prior")
abline(a = 0, b = 1, col = "red")
summary(mymle0$effect.se / igap$Beta)
summary(abs(mymle0$effect.se / igap$Beta))
plot(-log10(mymle0$Pval), -log10(mymle1$Pval))
par(mfrow = c(1, 2))
plot(-log10(igap$Pvalue), -log10(mymle0$Pval))
plot(-log10(mymle0$Pval), -log10(mymle1$Pval))
plot(-log10(igap$Pvalue), -log10(mymle0$Pval),
xlab = "-log10(Pval) in IGAP", ylab = "-log10(Pval) in Bayes-GLMM")
plot(-log10(mymle0$Pval), -log10(mymle1$Pval),
xlab = "-log10(Pval) in IGAP", ylab = "-log10(Pval) in Bayes-GLMM")
plot(-log10(igap$Pvalue), -log10(mymle1$Pval),
xlab = "-log10(Pval) in IGAP", ylab = "-log10(Pval) in Bayes-GLMM")
plot(-log10(mymle0$Pval), -log10(mymle1$Pval),
xlab = "-log10(Pval) in IGAP", ylab = "-log10(Pval) in Bayes-GLMM")
plot(-log10(mymle0$Pval), -log10(mymle1$Pval),
xlab = "-log10(Pval) in ADSP - No prior", ylab = "-log10(Pval) in ADSP - Method 1")
plot(-log10(igap$Pvalue), -log10(mymle1$Pval),
xlab = "-log10(Pval) in IGAP", ylab = "-log10(Pval) in Bayes-GLMM")
plot(-log10(mymle0$Pval), -log10(mymle1$Pval),
xlab = "ADSP - No prior", ylab = "ADSP - Prior by method 1")
plot(-log10(igap$Pvalue), -log10(mymle1$Pval),
xlab = "IGAP", ylab = "ADSP - Prior by method 1")
plot(-log10(mymle1$Pval), -log10(mymle0$Pval),
xlab = "ADSP - Prior by method 1", ylab = "ADSP - No prior")
plot(-log10(mymle1$Pval, -log10(igap$Pvalue)),
xlab = "ADSP - Prior by method 1", ylab = "IGAP")
plot(-log10(mymle1$Pval, -log10(igap$Pvalue),
xlab = "ADSP - Prior by method 1", ylab = "IGAP")
plot(-log10(igap$Pvalue), -log10(mymle1$Pval))
plot(-log10(igap$Pvalue), -log10(mymle2$Pval))
plot(-log10(igap$Pvalue), -log10(mymle3$Pval))
plot(-log10(igap$Pvalue), -log10(mymle4$Pval))
plot(mymle0$effect, mymle1$effect)
plot(mymle0$effect, mymle3$effect)
plot(mymle0$effect.se, mymle3$effect.se)
plot(-log10(mymle0$Pval), -log10(mymle2$Pval))
plot(-log10(mymle1$Pval), -log10(mymle0$Pval),
xlab = "ADSP - Prior by method 1", ylab = "ADSP - No prior")
plot(-log10(mymle1$Pval), -log10(igap$Pvalue),
xlab = "ADSP - Prior by method 1", ylab = "IGAP")
plot(-log10(mymle2$Pval), -log10(mymle0$Pval),
xlab = "ADSP - Prior by method 2", ylab = "ADSP - No prior")
plot(-log10(mymle2$Pval), -log10(igap$Pvalue),
xlab = "ADSP - Prior by method 2", ylab = "IGAP")
plot(-log10(mymle3$Pval), -log10(mymle0$Pval),
xlab = "ADSP - Prior by method 3", ylab = "ADSP - No prior")
plot(-log10(mymle3$Pval), -log10(igap$Pvalue),
xlab = "ADSP - Prior by method 3", ylab = "IGAP")
plot(-log10(mymle4$Pval), -log10(mymle0$Pval),
xlab = "ADSP - Prior by method 4", ylab = "ADSP - No prior")
plot(-log10(mymle4$Pval), -log10(igap$Pvalue),
xlab = "ADSP - Prior by method 4", ylab = "IGAP")
plot(-log10(mymle1$Pval), -log10(mymle0$Pval),
xlab = "ADSP - Prior by method 1", ylab = "ADSP - No prior")
plot(-log10(mymle1$Pval), -log10(igap$Pvalue),
xlab = "ADSP - Prior by method 1", ylab = "IGAP")
plot(-log10(mymle1$Pval), -log10(mymle0$Pval),
xlab = "ADSP - Prior by method 1", ylab = "ADSP - No prior")
abline(a = 0, b = 1, col = "red")
plot(-log10(mymle1$Pval), -log10(igap$Pvalue),
xlab = "ADSP - Prior by method 1", ylab = "IGAP")
abline(a = 0, b = 1, col = "red")
plot(-log10(mymle2$Pval), -log10(mymle0$Pval),
xlab = "ADSP - Prior by method 2", ylab = "ADSP - No prior")
abline(a = 0, b = 1, col = "red")
plot(-log10(mymle2$Pval), -log10(igap$Pvalue),
xlab = "ADSP - Prior by method 2", ylab = "IGAP")
abline(a = 0, b = 1, col = "red")
plot(-log10(mymle3$Pval), -log10(mymle0$Pval),
xlab = "ADSP - Prior by method 3", ylab = "ADSP - No prior")
abline(a = 0, b = 1, col = "red")
plot(-log10(mymle3$Pval), -log10(igap$Pvalue),
xlab = "ADSP - Prior by method 3", ylab = "IGAP")
abline(a = 0, b = 1, col = "red")
plot(-log10(mymle1$Pval), -log10(igap$Pvalue),
xlab = "ADSP - Prior by method 1", ylab = "IGAP")
abline(a = 0, b = 1, col = "red")
plot(-log10(mymle1$Pval), -log10(mymle0$Pval),
xlab = "ADSP - Prior by method 1", ylab = "ADSP - No prior")
abline(a = 0, b = 1, col = "red")
plot(-log10(mymle2$Pval), -log10(igap$Pvalue),
xlab = "ADSP - Prior by method 2", ylab = "IGAP")
abline(a = 0, b = 1, col = "red")
plot(-log10(mymle2$Pval), -log10(mymle0$Pval),
xlab = "ADSP - Prior by method 2", ylab = "ADSP - No prior")
abline(a = 0, b = 1, col = "red")
plot(-log10(mymle3$Pval), -log10(igap$Pvalue),
xlab = "ADSP - Prior by method 3", ylab = "IGAP")
abline(a = 0, b = 1, col = "red")
plot(-log10(mymle3$Pval), -log10(mymle0$Pval),
xlab = "ADSP - Prior by method 3", ylab = "ADSP - No prior")
abline(a = 0, b = 1, col = "red")
plot(-log10(mymle4$Pval), -log10(igap$Pvalue),
xlab = "ADSP - Prior by method 4", ylab = "IGAP")
abline(a = 0, b = 1, col = "red")
plot(-log10(mymle4$Pval), -log10(mymle0$Pval),
xlab = "ADSP - Prior by method 4", ylab = "ADSP - No prior")
abline(a = 0, b = 1, col = "red")
plot(mymle1$effect, mymle2$effect)
plot(mymle1$effect.se, mymle2$effect.se)
plot(-log10(mymle3$Pval), -log10(mymle4$Pval))
abline(a = 0, b = 1)
abline(a = 0, b = 1, col = "red")
