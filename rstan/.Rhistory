theme(legend.position="bottom", legend.justification="right",
legend.background = element_rect(colour = 'black', fill = 'white', size = 0.3, linetype='solid')) +
xlab("Posterior distribution of PFS under the two treatment arms")
ggout
}
dev.off()
pdf(file = "~/Projects/roche34/forward/fs1.pdf")
# for(subject in unique(myfs1$fixedDataRow)) { cat(subject, "\n")
for(subject in 1:3) { cat(subject, "\n")
gdt = myfs1[myfs1$fixedDataRow == subject, ]
gdt$output = log2(gdt$output + 1)
ggout = ggplot(gdt, aes(x = output, fill = condition)) +
scale_colour_brewer(palette="Set1") + scale_fill_brewer(palette="Set1") +
geom_density(alpha=0, aes(colour = condition), size = 1) +
geom_histogram(aes(y = ..density..), binwidth = .4, alpha = .5, position = "identity", linetype = 0) +
theme_bw() +
facet_wrap(~ Variable_Pert, scale = "free_y", nrow = 3) +
theme(legend.position="bottom", legend.justification="right",
legend.background = element_rect(colour = 'black', fill = 'white', size = 0.3, linetype='solid')) +
xlab("Posterior distribution of PFS under the two treatment arms")
ggout
}
dev.off()
dev.off()
pdf(file = "~/Projects/roche34/forward/fs1.pdf")
# for(subject in unique(myfs1$fixedDataRow)) { cat(subject, "\n")
for(subject in 1) { cat(subject, "\n")
gdt = myfs1[myfs1$fixedDataRow == subject, ]
gdt$output = log2(gdt$output + 1)
ggout = ggplot(gdt, aes(x = output, fill = condition)) +
scale_colour_brewer(palette="Set1") + scale_fill_brewer(palette="Set1") +
geom_density(alpha=0, aes(colour = condition), size = 1) +
geom_histogram(aes(y = ..density..), binwidth = .4, alpha = .5, position = "identity", linetype = 0) +
theme_bw() +
facet_wrap(~ Variable_Pert, scale = "free_y", nrow = 3) +
theme(legend.position="bottom", legend.justification="right",
legend.background = element_rect(colour = 'black', fill = 'white', size = 0.3, linetype='solid')) +
xlab("Posterior distribution of PFS under the two treatment arms")
ggout
}
dev.off()
pdf(file = "~/Projects/roche34/forward/fs1.pdf")
gdt = myfs1[myfs1$fixedDataRow == subject, ]
gdt$output = log2(gdt$output + 1)
ggout = ggplot(gdt, aes(x = output, fill = condition)) +
scale_colour_brewer(palette="Set1") + scale_fill_brewer(palette="Set1") +
geom_density(alpha=0, aes(colour = condition), size = 1) +
geom_histogram(aes(y = ..density..), binwidth = .4, alpha = .5, position = "identity", linetype = 0) +
theme_bw() +
facet_wrap(~ Variable_Pert, scale = "free_y", nrow = 3) +
theme(legend.position="bottom", legend.justification="right",
legend.background = element_rect(colour = 'black', fill = 'white', size = 0.3, linetype='solid')) +
xlab("Posterior distribution of PFS under the two treatment arms")
ggout
dev.off()
subject
pdf(file = "~/Projects/roche34/forward/fs1.pdf")
# for(subject in unique(myfs1$fixedDataRow)) { cat(subject, "\n")
# for(subject in 1) { cat(subject, "\n")
gdt = myfs1[myfs1$fixedDataRow == subject, ]
gdt$output = log2(gdt$output + 1)
ggout = ggplot(gdt, aes(x = output, fill = condition)) +
scale_colour_brewer(palette="Set1") + scale_fill_brewer(palette="Set1") +
geom_density(alpha=0, aes(colour = condition), size = 1) +
geom_histogram(aes(y = ..density..), binwidth = .4, alpha = .5, position = "identity", linetype = 0) +
theme_bw() +
facet_wrap(~ Variable_Pert, scale = "free_y", nrow = 3) +
theme(legend.position="bottom", legend.justification="right",
legend.background = element_rect(colour = 'black', fill = 'white', size = 0.3, linetype='solid')) +
xlab("Posterior distribution of PFS under the two treatment arms")
ggout
# }
dev.off()
head(myfs1)
pdf(file = "~/Projects/roche34/forward/fs1.pdf")
# for(subject in unique(myfs1$fixedDataRow)) { cat(subject, "\n")
# for(subject in 1) { cat(subject, "\n")
gdt = myfs1[myfs1$fixedDataRow == subject, ]
gdt$output = log2(gdt$output + 1)
ggout = ggplot(gdt, aes(x = output, fill = condition)) +
scale_colour_brewer(palette="Set1") + scale_fill_brewer(palette="Set1") +
geom_density(alpha=0, aes(colour = condition), size = 1) +
geom_histogram(aes(y = ..density..), binwidth = .4, alpha = .5, position = "identity", linetype = 0) +
theme_bw() +
#   facet_wrap(~ Variable_Pert, scale = "free_y", nrow = 3) +
theme(legend.position="bottom", legend.justification="right",
legend.background = element_rect(colour = 'black', fill = 'white', size = 0.3, linetype='solid')) +
xlab("Posterior distribution of PFS under the two treatment arms")
ggout
# }
dev.off()
pdf(file = "~/Projects/roche34/forward/fs1.pdf")
# for(subject in unique(myfs1$fixedDataRow)) { cat(subject, "\n")
for(subject in 1) { cat(subject, "\n")
gdt = myfs1[myfs1$fixedDataRow == subject, ]
gdt$output = log2(gdt$output + 1)
ggout = ggplot(gdt, aes(x = output, fill = condition)) +
scale_colour_brewer(palette="Set1") + scale_fill_brewer(palette="Set1") +
geom_density(alpha=0, aes(colour = condition), size = 1) +
geom_histogram(aes(y = ..density..), binwidth = .4, alpha = .5, position = "identity", linetype = 0) +
theme_bw() +
#   facet_wrap(~ Variable_Pert, scale = "free_y", nrow = 3) +
theme(legend.position="bottom", legend.justification="right",
legend.background = element_rect(colour = 'black', fill = 'white', size = 0.3, linetype='solid')) +
xlab("Posterior distribution of PFS under the two treatment arms")
ggout
}
dev.off()
pdf(file = "~/Projects/roche34/forward/fs1.pdf")
# for(subject in unique(myfs1$fixedDataRow)) { cat(subject, "\n")
for(subject in 1) { cat(subject, "\n")
gdt = myfs1[myfs1$fixedDataRow == subject, ]
gdt$output = log2(gdt$output + 1)
ggout = ggplot(gdt, aes(x = output, fill = condition)) +
scale_colour_brewer(palette="Set1") + scale_fill_brewer(palette="Set1") +
geom_density(alpha=0, aes(colour = condition), size = 1) +
geom_histogram(aes(y = ..density..), binwidth = .4, alpha = .5, position = "identity", linetype = 0) +
theme_bw() +
#   facet_wrap(~ Variable_Pert, scale = "free_y", nrow = 3) +
theme(legend.position="bottom", legend.justification="right",
legend.background = element_rect(colour = 'black', fill = 'white', size = 0.3, linetype='solid')) +
xlab("Posterior distribution of PFS under the two treatment arms")
print(ggout)
}
dev.off()
pdf(file = "~/Projects/roche34/forward/fs1.pdf")
for(subject in unique(myfs1$fixedDataRow)) { cat(subject, "\n")
gdt = myfs1[myfs1$fixedDataRow == subject, ]
gdt$output = log2(gdt$output + 1)
ggout = ggplot(gdt, aes(x = output, fill = condition)) +
scale_colour_brewer(palette="Set1") + scale_fill_brewer(palette="Set1") +
geom_density(alpha=0, aes(colour = condition), size = 1) +
geom_histogram(aes(y = ..density..), binwidth = .4, alpha = .5, position = "identity", linetype = 0) +
theme_bw() + ggtitle(paste("Subject", subject)) +
#   facet_wrap(~ Variable_Pert, scale = "free_y", nrow = 3) +
theme(legend.position="bottom", legend.justification="right",
legend.background = element_rect(colour = 'black', fill = 'white', size = 0.3, linetype='solid')) +
xlab("Posterior distribution of PFS under the two treatment arms")
print(ggout)
}
dev.off()
load(file = "/Users/xwang/Projects/roche34/otf/myfs1.rdt")
myfs1$condition = factor(myfs1$condition, levels = c("R", "G"))
pdf(file = "~/Projects/roche34/forward/fs1.pdf")
for(subject in unique(myfs1$fixedDataRow)) { cat(subject, "\n")
gdt = myfs1[myfs1$fixedDataRow == subject, ]
gdt$output = log2(gdt$output + 1)
ggout = ggplot(gdt, aes(x = output, fill = condition)) +
scale_colour_brewer(palette="Set1") + scale_fill_brewer(palette="Set1") +
geom_density(alpha=0, aes(colour = condition), size = 1) +
geom_histogram(aes(y = ..density..), binwidth = .4, alpha = .5, position = "identity", linetype = 0) +
theme_bw() + ggtitle(paste("Subject", subject)) +
#   facet_wrap(~ Variable_Pert, scale = "free_y", nrow = 3) +
theme(legend.position="bottom", legend.justification="right",
legend.background = element_rect(colour = 'black', fill = 'white', size = 0.3, linetype='solid')) +
xlab("Posterior distribution of PFS under the two treatment arms")
print(ggout)
}
dev.off()
head(myfs1)
library(ggplot2)
load(file = "/Users/xwang/Projects/roche34/otf/myfs1.rdt")
load(file = "/Users/xwang/Projects/roche34/otf/myfs1.rdt")
load(file = "/Users/xwang/Projects/roche34/otf/myfs1.rdt")
myfs1$condition = factor(myfs1$condition, levels = c("R", "G"))
head(myfs1)
x = "R"
sapply(unique(fixedDataRow), function(xx) median(y1$output[y1$fixedDataRow == xx]))
sapply(unique(y1$fixedDataRow), function(xx) median(y1$output[y1$fixedDataRow == xx]))
y1 = myfs1[myfs1$condition == x, ]
dim(y1)
dim(myfs1)
sapply(unique(y1$fixedDataRow), function(xx) median(y1$output[y1$fixedDataRow == xx]))
myout = sapply(c("R", "G"), function(x) {
y1 = myfs1[myfs1$condition == x, ]
sapply(unique(y1$fixedDataRow), function(xx) median(y1$output[y1$fixedDataRow == xx]))
})
dim(myout)
head(myout)
myout = as.data.frame(myout)
head(myout)
myout$pval = pval
head(myout)
myout$P-val = pval
myout$P.val = pval
myout$pval = NULL
head(myout)
write.xlsx(file = "/Users/xwang/Projects/roche34/report_otf.xlsx", sheetName = "Model 1 - PFS", append = T)
library(xlsx)
write.xlsx(file = "/Users/xwang/Projects/roche34/report_otf.xlsx", sheetName = "Model 1 - PFS", append = T)
write.xlsx(myout, file = "/Users/xwang/Projects/roche34/report_otf.xlsx", sheetName = "Model 1 - PFS", append = T)
load(file = "/Users/xwang/Projects/roche34/otf/myfs2.rdt")
rm(list = ls())
load(file = "/Users/xwang/Projects/roche34/otf/myfs2.rdt")
myfs1$condition = factor(myfs1$condition, levels = c("R", "G"))
myout = sapply(c("R", "G"), function(x) {
y1 = myfs1[myfs1$condition == x, ]
sapply(unique(y1$fixedDataRow), function(xx) median(y1$output[y1$fixedDataRow == xx]))
})
myout = as.data.frame(myout)
myout$P.val = pval
write.xlsx(myout, file = "/Users/xwang/Projects/roche34/report_otf.xlsx", sheetName = "Model 1 - OS", append = T)
rm(list = ls())
load(file = "/Users/xwang/Projects/roche34/otf/myfs3.rdt")
load(file = "/Users/xwang/Projects/roche34/otf/myfs3.rdt")
myfs1$condition = factor(myfs1$condition, levels = c("R", "G"))
head(myfs1)
myout = sapply(c("R", "G"), function(x) {
y1 = myfs1[myfs1$condition == x, ]
# sapply(unique(y1$fixedDataRow), function(xx) median(y1$output[y1$fixedDataRow == xx]))
sapply(unique(y1$fixedDataRow), function(xx) median(y1$pmf[y1$fixedDataRow == xx]))
})
head(myout)
myout = as.data.frame(myout)
myout$P.val = pval
write.xlsx(myout, file = "/Users/xwang/Projects/roche34/report_otf.xlsx", sheetName = "Model 1 - OR", append = T)
pnorm(1, 1)
?pnorm
pnorm(1, 0, 1)
1 - pnorm(1, 0, 1)
pnorm(0, 1, 1)
load("/Users/xwang/Projects/roche34/otf/clist.rdt")
library(reshape2)
library(ggplot2)
load("/Users/xwang/Projects/roche34/otf/clist.rdt")
rm(list = ls())
load("/Users/xwang/Projects/roche34/otf/clist.rdt")
os = clist$os
pfs = clist$pfs
head(os)
length(os)
head(os[[1]])
dim(os[[1]])
sapply(os, function(x) apply(x, 2, median))
os.long = do.call(rbind, os)
apply(os.long, 2, median)
pfs.long = do.call(rbind, pfs)
apply(pfs.long, 2, median)
pnorm(0, 1, 1)
pnorm(1, 0, 1)
1 - pnorm(1, 0, 1)
apply(os.long, 2, median)
pfs.long = do.call(rbind, pfs)
apply(pfs.long, 2, median)
rm(list = ls())
load(file = "/Users/xwang/Projects/roche34/otf/myfs3.rdt")
head(myfs1)
summary(myfs1$pmf)
myfs1$condition = factor(myfs1$condition, levels = c("R", "G"))
myout = sapply(c("R", "G"), function(x) {
y1 = myfs1[myfs1$condition == x, ]
# sapply(unique(y1$fixedDataRow), function(xx) median(y1$output[y1$fixedDataRow == xx]))
sapply(unique(y1$fixedDataRow), function(xx) median(y1$pmf[y1$fixedDataRow == xx]))
})
myout = as.data.frame(myout)
head(myout)
myout
xx = myfs1[myfs1$fixedDataRow == 369, ]
load(file = "/Users/xwang/Projects/roche34/R/roche_q3_rnaseq.rdt")
load(file = "/Users/xwang/Projects/roche34/R/roche_q3_refsdf.rdt")
which(refsdf.c1$or_OR == 2)
head(xx)
yy = which(refsdf.c1$or_OR == 2)
myout[yy, ]
myout = as.data.frame(myout)
myout$P.val = pval
myout = myout[refsdf.c1$or_OR != 2, ]
dim(myout)
write.xlsx(myout, file = "/Users/xwang/Projects/roche34/report_otf.xlsx", sheetName = "Model 1 - OR", append = T)
load("/home/xwang/roche34/data/roche_q3_refsdf.rdt")
load("/Users/xwang/Projects/roche34/R/roche_q3_asl2.rdt")
table(myasl2$REG)
table(myasl2$ETHNIC)
rm(list = ls())
load("/Users/xwang/Projects/roche34/otf/edgeAll.rdt") # 0.2 cutoff
edges = edgeAll$m1
edges.ooi = edges %>% filter(grepl("^pfs_|^or_|^os_", output))
library(dplyr)
library(igraph)
library(xlsx)
edges.ooi = edges %>% filter(grepl("^pfs_|^or_|^os_", output))
edges = edgeAll$m1
head(edges)
head(edgeAll$m1())
load("/Users/xwang/Projects/roche34/otf/edgeAll.rdt") # 0.2 cutoff
edges = edgeAll$m1
edges.ooi = edges %>% filter(grepl("^pfs_|^or_|^os_", output))
write.xlsx(edges, file = "/Users/xwang/Projects/roche34/otf/report_otf.xlsx", sheetName = "Model 1", append = T)
write.xlsx(edges.ooi, file = "/Users/xwang/Projects/roche34/otf/report_otf.xlsx", sheetName = "Model 1 - outcomes", append = T)
edges = edgeAll$m2
edges.ooi = edges %>% filter(grepl("^pfs_|^or_|^os_", output))
write.xlsx(edges, file = "/Users/xwang/Projects/roche34/otf/report_otf.xlsx", sheetName = "Model 2", append = T)
write.xlsx(edges.ooi, file = "/Users/xwang/Projects/roche34/otf/report_otf.xlsx", sheetName = "Model 2 - outcomes", append = T)
edges = edgeAll$m4
edges.ooi = edges %>% filter(grepl("^pfs_|^or_|^os_", output))
write.xlsx(edges, file = "/Users/xwang/Projects/roche34/otf/report_otf.xlsx", sheetName = "Model 4", append = T)
write.xlsx(edges.ooi, file = "/Users/xwang/Projects/roche34/otf/report_otf.xlsx", sheetName = "Model 4 - outcomes", append = T)
load("~/Projects/roche34/otf/alldata.rdt")
setdiff(names(refsdf.c2), names(refsdf.c1))
setdiff(names(refsdf.c1), names(refsdf.c2))
?pnorm
library(rstan)
rm(list = ls())
setwd("~/gitHub/Genetics/rstan")
stan.lm <- stan_model("./prior.stan")
x = seq(-20, 20, 0.1)
x
y.logist = exp(x) / (1+exp(x))
y.probit = pnorm(x, mean = 0, sd = 1)
plot(x, y.logist, col = "blue")
lines(x, y.probit, col = "red")
plot(x, y.logist, col = "blue", type = "l")
lines(x, y.probit, col = "red")
?dlogis
dens.logist = dlogis(x)
dens.logist = dlogis(x)
dens.probit = dnorm(x, mean = 0, sd = 1)
plot(x, dens.logist, col = "blue", type = "l")
lines(x, dens.probit, col = "red")
plot(x, dens.logist, col = "blue", type = "l", ylim = c(0, 0.5))
lines(x, dens.probit, col = "red")
?dlogis
dens.logist = dlogis(x, location = 0, scale = 1)
plot(x, dens.logist, col = "blue", type = "l", ylim = c(0, 0.5))
lines(x, dens.probit, col = "red")
cdf.logist = exp(x) / (1+exp(x))
cdf.probit = pnorm(x, mean = 0, sd = 1)
plot(x, cdf.logist, col = "blue", type = "l")
lines(x, cdf.probit, col = "red")
x = seq(-10, 10, 0.1)
cdf.logist = exp(x) / (1+exp(x))
cdf.probit = pnorm(x, mean = 0, sd = 1)
plot(x, cdf.logist, col = "blue", type = "l")
lines(x, cdf.probit, col = "red")
dens.logi = dlogis(x, location = 0, scale = 1)
dens.prob = dnorm(x, mean = 0, sd = 1)
plot(x, dens.logi, col = "blue", type = "l", ylim = c(0, 0.5))
lines(x, dens.prob, col = "red")
plot(x, dens.logi, col = "blue", type = "l")
plot(x, dens.logi, col = "blue", type = "l", xlim = c(-6, 6))
lm(dens.logi ~ 1)
summary(lm(dens.logi ~ 1))
sd(dens.logi)
mean(dens.logi)
sd(dens.logi)
dens.logi = dlogis(x, location = 0, scale = 1)
dens.prob = dnorm(x, mean = 0, sd = 1)
plot(x, dens.logi, col = "blue", type = "l", ylim = c(0, 0.5))
lines(x, dens.prob, col = "red")
library(rstan)
print(fit.norm)
load("~/GitHub/wgs2/Manu/R/mdata.rdt")
load("~/GitHub/wgs2/Manu/R/sampling.rdt")
load("~/GitHub/wgs2/Manu/R/genotypes.rdt")
load(ignore.case("~/GitHub/wgs2/Manu/R/mdata.rdt"))
load("~/gitHub/wgs2/Manu/R/mdata.rdt")
load("~/gitHub/wgs2/Manu/R/sampling.rdt")
load("~/gitHub/wgs2/Manu/R/genotypes.rdt")
load("~/gitHub/wgs2/Manu/R/genotypes.rdt")
mcmc = mcmc[order(mcmc$P), ]
mcmc = rownames(mcmc[1:100, ]) # top 100 variants
all(mcmc %in% rownames(geno))
all(mdata$ADSP.Sample.ID %in% colnames(geno))
geno = geno[mcmc, mdata$ADSP.Sample.ID]
prior.norm = stan_model("~/GitHub/Genetics/rstan/prior2.stan") # N(0, 1) as prior of variant effect
prior.flat = stan_model("~/GitHub/Genetics/rstan/prior3.stan") # flat as prior of variant effect
data <- list(N = 570, K = 4, D = 2, x = mdata[c("Age", "Sex")], y = as.numeric(mdata$AD1), g = geno[1, ])
fit.norm = sampling(prior.norm, data = data, chain = 1, iter = 1200, warmup = 200)
tops = lapply(1:nrow(geno), function(g1) {
data$g = geno[g1, ]
fit.norm = optimizing(prior.norm, data = data, hessian = TRUE, algorithm = "LBFGS")
fit.norm.se = tryCatch(sqrt(diag(solve(-fit.norm$hessian)))["p"], error=function(e) NULL)
fit.flat = optimizing(prior.flat, data = data, hessian = TRUE, algorithm = "LBFGS")
fit.flat.se = tryCatch(sqrt(diag(solve(-fit.flat$hessian)))["p"], error=function(e) NULL)
data.frame(norm = fit.norm$par["p"], norm.se = fit.norm.se, flat = fit.flat$par["p"], flat.se = fit.flat.se)
})
tops = as.data.frame(do.call(rbind, tops))
tops$P.norm <- pnorm(abs(tops$norm), sd = tops$norm.se, lower.tail = F) * 2
tops$P.flat <- pnorm(abs(tops$flat), sd = tops$flat.se, lower.tail = F) * 2
tops$P.norm <- -log10(tops$P.norm)
tops$P.flat <- -log10(tops$P.flat)
plot(tops$norm, tops$flat, xlab = "Standard Normal Prior", ylab = "Flat Prior", main = "Effect Size")
abline(a = 0, b = 1, col = "red")
load("~/gitHub/wgs2/Manu/R/sampling.rdt")
head(mcmc)
summary(mcmc$mean)
head(mcmc)
x = mcmc[, 1]
x
unlist(x)
summary(unlist(x))
x = unlist(x)
table(x > 1.5)
plot(tops$P.norm, tops$P.flat, xlab = "Standard Normal Prior", ylab = "Flat Prior", main = "Tail Probability")
abline(a = 0, b = 1, col = "red")
head(tops)
tops$ratio = (tops$norm - tops$flat) / tops$flat * 100
head(tops)
plot(tops$flat, tops$ratio)
plot(tops$flat, tops$ratio, ylim = c(-50, 10))
plot(tops$flat, tops$ratio, ylim = c(-50, 10), xlab = "Effect Size by Flat Prior", ylab = "Ratio of Shrinkage")
mean(tops$ratio)
plot(tops$flat, tops$ratio, ylim = c(-50, 10), xlab = "Effect Size by Flat Prior", ylab = "Ratio %", main = "Ratio of Shrinkage")
library(rstan)
setwd("~/GitHub/Genetics/rstan/")
logit = stan_model("logit.stan") # Stan manual
logit2 = stan_model("logit2.stan") # modified version
probit2 = stan_model("probit2.stan") # modified version
load("mdata.rdt") # ADSP
dat <- list(N = 570, K = 4, D = 2, x = mdata[c("Age", "Sex")], y = as.numeric(mdata$AD1))
logit2.mle = optimizing(logit2, data = dat)
probit2.mle = optimizing(probit2, data = dat)
logit2.mle
probit2.mle
probit2.mc = sampling(probit2, data = dat, chain = 1, iter = 1200, warmup = 200)
probit2.mc
plot(probit2.mc, par = "lp__")
logit2 = stan_model("logit2.stan") # modified version
probit2 = stan_model("probit2.stan") # modified version
load("~/gitHub/wgs2/Manu/R/mdata.rdt")
load("~/gitHub/wgs2/Manu/R/sampling.rdt")
load("~/gitHub/wgs2/Manu/R/genotypes.rdt")
mcmc = mcmc[order(mcmc$P), ]
mcmc = rownames(mcmc[1:100, ]) # top 100 variants
all(mcmc %in% rownames(geno))
all(mdata$ADSP.Sample.ID %in% colnames(geno))
geno = geno[mcmc, mdata$ADSP.Sample.ID]
data <- list(N = 570, K = 4, D = 2, x = mdata[c("Age", "Sex")], y = as.numeric(mdata$AD1))
tops = lapply(1:nrow(geno), function(g1) {
data$g = geno[g1, ]
fit.logist = optimizing(logit2, data = data, hessian = TRUE, algorithm = "LBFGS")
fit.probit = optimizing(probit2, data = data, hessian = TRUE, algorithm = "LBFGS")
data.frame(logist = fit.logist$par["lp__"], probit = fit.probit$par["lp__"])
})
data$g = rep(0, 570)
logit2.mle = optimizing(logit2, data = data)
data
data$g = rep(sample(0, 1), size = 570, replace = T)
logit2.mle = optimizing(logit2, data = data)
logit2 = stan_model("logit2.stan") # modified version
logit2.mle = optimizing(logit2, data = data)
data$g = geno[1, ]
logit2.mle = optimizing(logit2, data = data)
probit2 = stan_model("probit2.stan") # modified version
tops = lapply(1:nrow(geno), function(g1) {
data$g = geno[g1, ]
fit.logist = optimizing(logit2, data = data, hessian = TRUE, algorithm = "LBFGS")
fit.probit = optimizing(probit2, data = data, hessian = TRUE, algorithm = "LBFGS")
data.frame(logist = fit.logist$par["lp__"], probit = fit.probit$par["lp__"])
})
probit.mle
probit.mle = optimizing(probit, data = data)
probit2.mle
tops = lapply(1:nrow(geno), function(g1) {
data$g = geno[g1, ]
fit.logist = optimizing(logit2, data = data, hessian = TRUE, algorithm = "LBFGS")
fit.probit = optimizing(probit2, data = data, hessian = TRUE, algorithm = "LBFGS")
data.frame(logist = fit.logist$value, probit = fit.probit$value)
})
tops = as.data.frame(do.call(rbind, tops))
head(tops)
plot(tops$logist, tops$probit)
head(tops, n = 20)
tops = tops[apply(tops, 1, min) > -1000, ]
plot(tops$logist, tops$probit)
plot(tops$logist, tops$probit, xlim = c(-600, -580), ylim = c(-600, -580))
plot(tops$logist, tops$probit, xlim = c(-590, -580), ylim = c(-590, -580))
abline(0, 1)
plot(tops$logist, tops$probit, xlim = c(-590, -580), ylim = c(-590, -580),
xlab = "Logistic", ylab = "Probit", main = "Posterior Likelihood Probability")
abline(0, 1, col = "red")
x = seq(-10, 10, 0.1)
cdf.logit = exp(x) / (1+exp(x))
cdf.probit = pnorm(x, mean = 0, sd = 1)
plot(x, cdf.logit, col = "blue", type = "l")
lines(x, cdf.probit, col = "red")
dens.logit = dlogis(x, location = 0, scale = 1)
dens.probit = dnorm(x, mean = 0, sd = 1)
plot(x, dens.logit, col = "blue", type = "l", xlim = c(-6, 6))
plot(x, dens.logit, col = "blue", type = "l", ylim = c(0, 0.5))
lines(x, dens.probit, col = "red")
pnorm(0, 3, 1)
pnorm(-3, 0, 1)
1 - pnorm(3, 0, 1)
library(MCMCpack)
dirich = rdirichlet(1e3, alpha = rep(1, 3))
table(rowSums(dirich)) # each sample is a simplex vector
library(MCMCpack)
install.packages("MCMCpack")
library(MCMCpack)
dirich = rdirichlet(1e3, alpha = rep(1, 3))
table(rowSums(dirich)) # each sample is a simplex vector
dirich = rdirichlet(1e3, alpha = rep(2, 3))
table(rowSums(dirich)) # each sample is a simplex vector
head(dirich)
dirich = rdirichlet(1e3, alpha = rep(1, 3))
head(dirich)
?rdirichlet
ddirichlet(2, 1)
ddirichlet(1, 1)
ddirichlet(1, c(1, 1))
ddirichlet(1, alpha = c(1, 1))
ddirichlet(c(1, 2), alpha = c(1, 1))
ddirichlet(c(1, 1), alpha = c(1, 1))
ddirichlet(c(1, 0.1), alpha = c(1, 1))
ddirichlet(c(0.1, 0.1), alpha = c(1, 1))
ddirichlet(c(0.1, 0.9), alpha = c(1, 1))
dirich = rdirichlet(1e3, alpha = c(1, 2, 3))
table(rowSums(dirich)) # each sample is a simplex vector
head(dirich)
plot(density(c(dirich)))
summary(c(dirich))
