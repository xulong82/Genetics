pathfreq1$model = x
pathfreq1
})
pathfreq = do.call(rbind, pathfreq)
head(pathfreq)
pathfreq$input = as.character(pathfreq$input)
pathfreq$output = as.character(pathfreq$output)
pathfreq$output[pathfreq$output == "or_OR"] = "OR"
pathfreq$output[pathfreq$output == "os_AVAL"] = "OS"
pathfreq$output[pathfreq$output == "pfs_AVAL"] = "PFS"
pathfreq$input = gsub("\\..*_", "\\.", pathfreq$input)
rownames(pathfreq) = NULL
head(pathfreq)
pathfreq$model[pathfreq$model == "model3"] = "model3a"
pathfreq$model[pathfreq$model == "model4"] = "model3b"
myfreq = sapply(1:nrow(table6), function(x) {
model = table6$model[x]
input = table6$variable[x]
output = table6$outcome[x]
index = which(pathfreq$model == model & pathfreq$input == input & pathfreq$output == output)
pathfreq$freq[index]
})
myfreq
head(table6)
table6$variableType = "continuous"
table6$variableType[table6$values_low == 0] = "categorical"
model = models[1]
if (model == "model1") { xx = all$model1; data = refsdf.c1}
xx$model = model
values = sapply(1:nrow(xx), function(xxx) {
var = xx[xxx, "variable"]
if (length(unique(data[, var])) == 2)
values = c(0, 1)
else
values = c("25th percentile value", "75th percentile value")
#   values = quantile(data[, var], c(.25, .75))
level = xx[xxx, "var_level"]
if (level == "low") out = values[1]
if (level == "high") out = values[2]
out
})
xx$values = unlist(values)
xx$outcome[xx$outcome == "or_OR"] = "OR"
xx$outcome[xx$outcome == "os_AVAL"] = "OS"
xx$outcome[xx$outcome == "pfs_AVAL"] = "PFS"
pop1 = pop[pop$model == model, ]
xx$pop = pop1[match(xx$outcome, pop1$output), "orhr"]
xx$dist = abs(as.numeric(xx$EFF) - as.numeric(xx$pop))
xx.low = xx[xx$var_level == "low", ]
xx.high = xx[xx$var_level == "high", ]
all(xx.low$outcome == xx.high$outcome)
all(xx.low$variable == xx.high$variable)
names(xx.low) = paste0(names(xx.low), "_low")
names(xx.high) = paste0(names(xx.high), "_high")
xx.new = cbind(xx.low, xx.high)
xx.new$var_level_high = xx.new$var_level_low = NULL
xx.new$model_high = xx.new$variable_high = xx.new$outcome_high = xx.new$pop_high = NULL
xx.new$EFF_diff = as.numeric(xx.new$EFF_high) - as.numeric(xx.new$EFF_low)
xx = xx.new
head(xx)
table6 = lapply(models, function(model) { cat (model, "\n")
if (model == "model1") { xx = all$model1; data = refsdf.c1}
if (model == "model2") { xx = all$model2; data = refsdf.c2}
if (model == "model3a") { xx = all$model3; data = refsdf_rnaseq}
if (model == "model3b") { xx = all$model4; data = refsdf_fmi}
xx$model = model
values = sapply(1:nrow(xx), function(xxx) {
var = xx[xxx, "variable"]
if (length(unique(data[, var])) == 2)
values = c(0, 1)
else
values = c("25th percentile value", "75th percentile value")
#   values = quantile(data[, var], c(.25, .75))
level = xx[xxx, "var_level"]
if (level == "low") out = values[1]
if (level == "high") out = values[2]
out
})
xx$values = unlist(values)
xx$outcome[xx$outcome == "or_OR"] = "OR"
xx$outcome[xx$outcome == "os_AVAL"] = "OS"
xx$outcome[xx$outcome == "pfs_AVAL"] = "PFS"
pop1 = pop[pop$model == model, ]
xx$pop = pop1[match(xx$outcome, pop1$output), "orhr"]
xx$dist = abs(as.numeric(xx$EFF) - as.numeric(xx$pop))
xx.low = xx[xx$var_level == "low", ]
xx.high = xx[xx$var_level == "high", ]
all(xx.low$outcome == xx.high$outcome)
all(xx.low$variable == xx.high$variable)
names(xx.low) = paste0(names(xx.low), "_low")
names(xx.high) = paste0(names(xx.high), "_high")
xx.new = cbind(xx.low, xx.high)
xx.new$var_level_high = xx.new$var_level_low = NULL
xx.new$model_high = xx.new$variable_high = xx.new$outcome_high = xx.new$pop_high = NULL
xx.new$EFF_diff = as.numeric(xx.new$EFF_high) - as.numeric(xx.new$EFF_low)
xx = xx.new
xx$EFF_diff[xx$variable_low != 0] = 2 * xx$EFF_diff[xx$variable_low != 0]
xx.or = xx[xx$outcome == "OR", ]
# xx.or = xx.or[order(xx.or$dist, decreasing = T), ]
xx.or = xx.or[order(abs(xx.or$EFF_diff), decreasing = T), ]
xx.or$rank = 1:nrow(xx.or)
xx.os = xx[xx$outcome == "OS", ]
# xx.os = xx.os[order(xx.os$dist, decreasing = T), ]
xx.os = xx.os[order(abs(xx.os$EFF_diff), decreasing = T), ]
xx.os$rank = 1:nrow(xx.os)
xx.pfs = xx[xx$outcome == "PFS", ]
# xx.pfs = xx.pfs[order(xx.pfs$dist, decreasing = T), ]
xx.pfs = xx.pfs[order(abs(xx.pfs$EFF_diff), decreasing = T), ]
xx.pfs$rank = 1:nrow(xx.pfs)
xx = rbind(xx.or, xx.os, xx.pfs)
xx$variable = gsub("\\..*_", "\\.", xx$variable)
xx
})
table6 = do.call(rbind, table6)
table6$EFF_low = round(as.numeric(table6$EFF_low), 3)
table6$EFF_high = round(as.numeric(table6$EFF_high), 3)
table6$pop = round(as.numeric(table6$pop_low), 3)
table6$dist_low = round(as.numeric(table6$dist_low), 3)
table6$dist_high = round(as.numeric(table6$dist_high), 3)
table6$EFF_diff = round(as.numeric(table6$EFF_diff), 3)
load(file = "~/Projects/roche34/fs/pathfreq_pred.rdt")
pathfreq = lapply(names(pathfreq), function(x) {
pathfreq1 = pathfreq[[x]]
pathfreq1 = do.call(rbind, pathfreq1)
pathfreq1$model = x
pathfreq1
})
pathfreq = do.call(rbind, pathfreq)
head(pathfreq)
pathfreq$input = as.character(pathfreq$input)
pathfreq$output = as.character(pathfreq$output)
pathfreq$output[pathfreq$output == "or_OR"] = "OR"
pathfreq$output[pathfreq$output == "os_AVAL"] = "OS"
pathfreq$output[pathfreq$output == "pfs_AVAL"] = "PFS"
pathfreq$input = gsub("\\..*_", "\\.", pathfreq$input)
rownames(pathfreq) = NULL
head(pathfreq)
pathfreq$model[pathfreq$model == "model3"] = "model3a"
pathfreq$model[pathfreq$model == "model4"] = "model3b"
myfreq = sapply(1:nrow(table6), function(x) {
model = table6$model[x]
input = table6$variable[x]
output = table6$outcome[x]
index = which(pathfreq$model == model & pathfreq$input == input & pathfreq$output == output)
pathfreq$freq[index]
})
table6$variableType = "continuous"
table6$variableType[table6$values_low == 0] = "categorical"
table6.final = data.frame(Model = table6$model,
Outcome = table6$outcome,
population_HR_OR = table6$pop,
Biomarker = table6$variable,
variableType = table6$variableType,
causalFrequency = myfreq,
HR_OR_low = paste(table6$EFF_low, table6$CI_low),
#                         distanceFromPopulationToLow = table6$dist_low,
HR_OR_high = paste(table6$EFF_high, table6$CI_high),
#                         distanceFromPopulationToHigh = table6$dist_high,
PE = -1 * table6$EFF_diff,
PE_rank = table6$rank)
table6.final = table6.final[abs(table6.final$PE) > 0.1, ]
write.xlsx(table6.final, file = "/Users/xwang/Projects/roche34/deliver/table6d.xlsx", sheetName = "Predictive", append = T)
library(xlsx)
library(Biobase)
rm(list = ls())
file = "/Users/xwang/Projects/roche34/deliver/table5.xlsx"
load(file = "~/Projects/roche34/fs/table5.rdt")
load(file = "~/Projects/roche34/otf/alldata.rdt")
models = c("model1", "model2", "model3a", "model3b")
table5 = lapply(models, function(model) { cat (model, "\n")
if (model == "model1") { xx = all$model1; data = refsdf.c1}
if (model == "model2") { xx = all$model2; data = refsdf.c2}
if (model == "model3a") { xx = all$model3; data = refsdf_rnaseq}
if (model == "model3b") { xx = all$model4; data = refsdf_fmi}
xx$model = model
values = sapply(1:nrow(xx), function(xxx) {
var = xx[xxx, "variable"]
if (length(unique(data[, var])) == 2) { values = c(0, 1) }
else { values = quantile(data[, var], c(.25, .75)) }
values = round(values, digits = 3)
paste0(values, collapse = ",")
})
xx$values = unlist(values)
xx$outcome[xx$outcome == "or_OR"] = "OR"
xx$outcome[xx$outcome == "os_AVAL"] = "OS"
xx$outcome[xx$outcome == "pfs_AVAL"] = "PFS"
xx$variable = gsub("\\..*_", "\\.", xx$variable)
xx
})
table5 = do.call(rbind, table5)
table5$EFF.G = round(as.numeric(table5$EFF.G), 3)
table5$EFF.R = round(as.numeric(table5$EFF.R), 3)
table5$P.R = round(as.numeric(table5$P.R), 3)
table5$P.G = round(as.numeric(table5$P.G), 3)
load(file = "~/Projects/roche34/fs/pathfreq_prog.rdt")
pathfreq = lapply(names(pathfreq), function(x) {
pathfreq1 = pathfreq[[x]]
pathfreq1 = do.call(rbind, pathfreq1)
pathfreq1$model = x
pathfreq1
})
pathfreq = do.call(rbind, pathfreq)
head(pathfreq)
pathfreq$input = as.character(pathfreq$input)
pathfreq$output = as.character(pathfreq$output)
pathfreq$output[pathfreq$output == "or_OR"] = "OR"
pathfreq$output[pathfreq$output == "os_AVAL"] = "OS"
pathfreq$output[pathfreq$output == "pfs_AVAL"] = "PFS"
pathfreq$input = gsub("\\..*_", "\\.", pathfreq$input)
rownames(pathfreq) = NULL
head(pathfreq)
pathfreq$model[pathfreq$model == "model3"] = "model3a"
pathfreq$model[pathfreq$model == "model4"] = "model3b"
myfreq = sapply(1:nrow(table5), function(x) {
model = table5$model[x]
input = table5$variable[x]
output = table5$outcome[x]
index = which(pathfreq$model == model & pathfreq$input == input & pathfreq$output == output)
pathfreq$freq[index]
})
table5.final = data.frame(Model = table5$model,
Outcome = table5$outcome,
Biomarker = table5$variable,
causalFrequency = myfreq,
biomarkerValues = table5$values,
HR_OR_G = paste(table5$EFF.G, table5$CI.G),
P_G = table5$P.G,
HR_OR_R = paste(table5$EFF.R, table5$CI.R),
P_R = table5$P.R)
table5.final$maxP = rowMax(cbind(as.numeric(table5.final$P_G), as.numeric(table5.final$P_R)))
head(table4)
head(table5)
head(table5.final)
table5.final = table5.final[table5.final$maxP < 0.2, ]
write.xlsx(table5.final, file = "/Users/xwang/Projects/roche34/deliver/table5d.xlsx", sheetName = "Prognostic", append = T)
x = c(rep("a", 1e2), rep("b", 1e2), rep("c", "1e2"))
y = c(rnorm(1e2, 1, 1), rnorm(1e2, 2, 1), rnorm(1e2, 3, 1))
lm(y ~ x)
lm(y ~ as.factor(x))
x
x = as.factor(x)
x
lm(y ~ x) %>% summary
library(dplyr)
lm(y ~ x) %>% summary
lm(y ~ x - 1) %>% summary
x.miss = rep("m", 1e2)
y.miss = sample(y, 1e2)
x.new = c(x, x.miss)
x.new = factor(x.new)
x.new = c(x, x.miss)
str(x.new)
x.new = factor(c(x, x.miss))
str(x.new)
x = c(rep("a", 1e2), rep("b", 1e2), rep("c", "1e2"))
x = as.factor(x)
x.new = c(x, x.miss)
x.new
str(x.new)
x = c(rep("a", 1e2), rep("b", 1e2), rep("c", "1e2"))
x = as.factor(x)
x
relevel(c(x, x.miss))
x = c(rep("a", 1e2), rep("b", 1e2), rep("c", "1e2"))
x.new = c(x, x.miss)
x.new = factor(x.new)
x.new
y.new = c(y, y.miss)
lm(y ~ x - 1) %>% summary
lm(y.new ~ x.new - 1) %>% summary
x = c(rep("a", 1e2), rep("b", 1e2), rep("c", "1e2"))
x = as.factor(x)
y = c(rnorm(1e2, 1, 3), rnorm(1e2, 2, 3), rnorm(1e2, 3, 3))
lm(y ~ x - 1) %>% summary
lm(y ~ x - 1) %>% summary
x.miss = rep("m", 1e2)
y.miss = sample(y, 1e2)
x = c(rep("a", 1e2), rep("b", 1e2), rep("c", "1e2"))
x.new = c(x, x.miss)
x.new = factor(x.new)
y.new = c(y, y.miss)
lm(y.new ~ x.new - 1) %>% summary
y.miss = sample(y[1:1e2], 1e2)
y.new = c(y, y.miss)
lm(y.new ~ x.new - 1) %>% summary
y.miss = sample(y[1e2:2e2], 1e2)
y.new = c(y, y.miss)
lm(y.new ~ x.new - 1) %>% summary
y = c(rnorm(1e2, 1, 1), rnorm(1e2, 2, 2), rnorm(1e2, 3, 3))
y.new = c(y, y.miss)
lm(y.new ~ x.new - 1) %>% summary
hist(y)
y = c(rnorm(1e2, 1, 1), rnorm(1e2, 2, 2), rnorm(1e3, 3, 3))
lm(y ~ x - 1) %>% summary
x = c(rep("a", 1e2), rep("b", 1e2), rep("c", 1e2))
x = as.factor(x)
x
y = c(rnorm(1e2, 1, 1), rnorm(1e2, 2, 2), rnorm(1e2, 3, 3))
lm(y ~ x - 1) %>% summary
x = c(rep("a", 1e2), rep("b", 1e2), rep("c", 1e3))
x = as.factor(x)
y = c(rnorm(1e2, 1, 1), rnorm(1e2, 2, 2), rnorm(1e3, 3, 3))
lm(y ~ x - 1) %>% summary
x = c(rep("a", 1e2), rep("b", 1e2), rep("c", 1e2))
x = as.factor(x)
y = c(rnorm(1e2, 1, 1), rnorm(1e2, 2, 2), rnorm(1e2, 3, 3))
lm(y ~ x - 1) %>% summary
x.miss = rep("m", 1e1)
x.miss
y.miss = sample(y, 1e1)
x = c(rep("a", 1e2), rep("b", 1e2), rep("c", "1e2"))
x = c(rep("a", 1e2), rep("b", 1e2), rep("c", 1e2))
x.new = c(x, x.miss)
x.new = factor(x.new)
y.new = c(y, y.miss)
lm(y.new ~ x.new - 1) %>% summary
x = c(rep("a", 1e2), rep("b", 1e2), rep("c", 1e2))
x = as.factor(x)
y = c(rnorm(1e2, 1, 1), rnorm(1e2, 2, 2), rnorm(1e2, 3, 3))
lm(y ~ x - 1) %>% summary
x.miss = rep("m", 1e1)
y.miss = y[1:1e2]
x = c(rep("a", 1e2), rep("b", 1e2), rep("c", 1e2))
x.new = c(x, x.miss)
x.new = factor(x.new)
y.new = c(y, y.miss)
lm(y.new ~ x.new - 1) %>% summary
y.miss = sample(y[1:1e2], 1e1)
y.new = c(y, y.miss)
lm(y.new ~ x.new - 1) %>% summary
y.miss = sample(y[101:2e2], 1e1)
y.new = c(y, y.miss)
lm(y.new ~ x.new - 1) %>% summary
y.miss = sample(y[201:3e2], 1e1)
y.new = c(y, y.miss)
lm(y.new ~ x.new - 1) %>% summary
lm(y ~ x - 1) %>% summary
lm(y ~ x - 1) %>% summary
y.miss = sample(y, 1e1)
y.new = c(y, y.miss)
lm(y.new ~ x.new - 1) %>% summary
y.miss = sample(y[1:1e2], 1e1)
y.new = c(y, y.miss)
lm(y.new ~ x.new - 1) %>% summary
var(y[1:1e2])
var(y[101:2e2])
var(y[201:3e2])
y.miss = sample(y[1:1e2], 1e1)
var(y.miss)
y.miss = sample(y, 1e1)
var(y.miss)
plot(y.miss)
plot(y)
y.miss = sample(y, 1e2)
plot(y.miss)
x <- rnorm(100)
y <- 2*x + 3
x2 <- rnorm(30)
y2 <- rep(0, 30)
x1 <- rnorm(100)
y1 <- 2*x1 + 3
x2 <- rnorm(30)
y2 <- rep(0, 30)
yy <- c(y1, y2)
xx <- c(x1, x2)
i <- c(rep(1, 100), rep(0, 30))
zz = i * xx
lm(yy ~ 0 + i + i:xx) %>% summary
lm(yy ~ 0 + i + zz) %>% summary
lm(yy[1:100] ~ 0 + i[1:100] + xx[1:100]) %>% summary
plot(zz, yy)
y1 <- 2*x1 + rnorm(3, 3)
y1 <- 2*x1 + rnorm(100, 3, 3)
x1 <- rnorm(100)
y1 <- 2*x1 + rnorm(100, 3, 3)
x2 <- rnorm(30)
y2 <- rep(0, 30)
yy <- c(y1, y2)
xx <- c(x1, x2)
i <- c(rep(1, 100), rep(0, 30))
zz = i * xx
plot(zz, yy)
x1 <- rnorm(100)
y1 <- 2*x1 + rnorm(100, 3, 1)
x2 <- rnorm(30)
y2 <- rep(0, 30)
yy <- c(y1, y2)
xx <- c(x1, x2)
i <- c(rep(1, 100), rep(0, 30))
zz = i * xx
plot(zz, yy)
lm(yy ~ 0 + i + i:xx) %>% summary
lm(yy ~ 0 + i + zz) %>% summary
hist(yy)
hist(yy, size = 1e2)
hist(yy, n = 1e2)
hist(xx, n = 1e2)
hist(xx, n = 1e2)
hist(yy, n = 1e2)
lm(yy ~ 0 + i + i:xx) %>% summary
lm(yy ~ 0 + i + zz) %>% summary
lm(yy[1:100] ~ 0 + i[1:100] + xx[1:100]) %>% summary
lm(yy ~ 0 + i + zz) %>% summary
lm(yy ~ 0 + i + i:xx) %>% summary
lm(yy[1:1e2] ~ 0 + i[1:1e2] + xx[1:1e2]) %>% summary
lm(yy ~ 0 + i + zz) %>% summary
lm(yy ~ 0 + i + i:xx) %>% summary
lm(yy[1:1e2] ~ 0 + i[1:1e2] + xx[1:1e2]) %>% summary
lm(yy ~ 0 + i + zz) %>% summary
lm(yy ~ 0 + i + i:xx) %>% summary
lm(yy[1:1e2] ~ 0 + i[1:1e2] + xx[1:1e2]) %>% summary
lm(yy ~ 0 + i + zz) %>% summary
lm(yy ~ 0 + i + i:xx) %>% summary
lm(yy[1:1e2] ~ 0 + i[1:1e2] + xx[1:1e2]) %>% summary
lm(yy ~ 0 + i + zz) %>% summary
lm(yy ~ 0 + i + i:xx) %>% summary
lm(yy[1:1e2] ~ 0 + i[1:1e2] + xx[1:1e2]) %>% summary
lm(yy ~ 0 + i + zz) %>% summary
lm(yy ~ 0 + i + i:xx) %>% summary
lm(yy[1:1e2] ~ 0 + i[1:1e2] + xx[1:1e2]) %>% summary
p = seq(0, 1, 100)
p
p = seq(100, 0, 1)
?seq
p = seq(0, 1, 1e-2)
p = seq(0, 1, 1e-2)
gini = p^2 + (1-p)^2
plot(p, gini)
9 / sqrt(5)
sqrt(9 / 5)
log2(2)
p = seq(0.01, 1, 1e-2)
e = -p*log2(p) - (1-p)*log2(1-p)
plot(p, e)
p = seq(0.01, 1, 1e-2)
gini = p^2 + (1-p)^2
plot(p, gini)
plot(p, e)
plot(gini, e)
plot(gini, 1-e)
plot(gini, 1-e); abline(a = 0, b = 1)
plot(p, e)
library(randomForest)
install.packages("randomForest")
library(randomForest)
set.seed(1)
alpha <- 0.7 # percentage of training set
index <- sample(1:nrow(iris), alpha * nrow(iris))
train <- iris[index,]
test  <- iris[-index,]
rf.model <- randomForest(Species ~ Sepal.Width + Petal.Width, data = train)
summary(rf.model)
plot(rf.model); text(rf.model)
plot(rf.model)
mypredict <- predict(rf.model, test) # gives the probability for each class
head(mypredict)
predicted <- predict(rf.model, test)
table(predicted, test$Species)
library(rpart)
rpart.tree <- rpart(Species ~ ., data = train)
rpart.tree <- rpart(Species ~ Sepal.Width + Petal.Width, data = train)
plot(rpart.tree, uniform=TRUE, branch=0.6, margin=0.05);
text(rpart.tree, all=TRUE, use.n=TRUE)
predicted <- predict(rpart.tree, test, type="class")
table(test$Species, predicted)
x = seq(-10, 10, 0.1)
y = sigmoid(x)
x = seq(-10, 10, 0.1)
y = 1 / (1 + exp(-x))
plot(x, y)
plot(x, y, type = "l")
rm(list = ls())
setwd("~/gitHub/Genetics/mle")
load("./mdata.rdt")
load("./sampling.rdt")
load("./genotypes.rdt")
mcmc = mcmc[order(mcmc$P), ]
mcmc = rownames(mcmc[1:100, ]) # top 100 variants
all(mcmc %in% rownames(geno))
all(mdata$ADSP.Sample.ID %in% colnames(geno))
geno = geno[mcmc, mdata$ADSP.Sample.ID]
glm <- stan_model("./glm.stan")
library(rstan)
library(dplyr)
glm <- stan_model("./glm.stan")
data <- list(N = 570, K = 4, D = 2, x = mdata[c("Age", "Sex")], y = as.numeric(mdata$AD1), g = geno[1, ])
mymle <- lapply(1:nrow(geno), function(g1) {
data$g = geno[g1, ]
mle1 = optimizing(glm, data = data, hessian = TRUE, algorithm = "LBFGS")
mle1.se = tryCatch(sqrt(diag(solve(-mle1$hessian)))["p"], error=function(e) NULL)
data.frame(effect = mle1$par["p"], effect.se = mle1.se)
}); names(mymle) = rownames(geno)
mymle = as.data.frame(do.call(rbind, mymle))
mymle$Pval <- pnorm(abs(mymle$effect), sd = mymle$effect.se, lower.tail = F) * 2
mymcmc <- lapply(1:nrow(geno), function(g1) {
data$g = geno[g1, ]
mcmc1 = sampling(glm, data = data, chain = 1, iter = 1200, warmup = 200)
mcmc1 = summary(mcmc1, pars = c("p", "beta"))$summary
mcmc1 = mcmc1["p", c("mean", "sd")]
}); names(mymcmc) = rownames(geno)
mymcmc = as.data.frame(do.call(rbind, mymcmc))
mymcmc$Pval <- pnorm(abs(mymcmc$mean), sd = mymcmc$sd, lower.tail = F) * 2
plot(mymle$effect, mymcmc$mean)
plot(mymle$effect.se, mymcmc$sd)
plot(-log10(mymle$Pval), -log10(mymcmc$Pval))
abline(a = 0, b = 1)
plot(mymle$effect, mymcmc$mean, xlab = "Mean by MLE", ylab = "Mean by MCMC")
plot(mymle$effect.se, mymcmc$sd, xlab = "St.Err by MLE", ylab = "St.Dev by MCMC")
plot(-log10(mymle$Pval), -log10(mymcmc$Pval), xlab = "P-value by MLE", ylab = "P-value by MCMC")
abline(a = 0, b = 1)
abline(a = 0, b = 1)
abline(a = 0, b = 1)
